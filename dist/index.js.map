{"version":3,"sources":["../src/context/SonorityContext.tsx","../src/utils/audioManager.ts","../src/components/Current.tsx","../src/components/shared/VolumeGraph.tsx","../src/components/Control.tsx","../src/components/Playlist.tsx","../src/components/Track.tsx","../src/components/Visualizer.tsx","../src/components/Sonority.tsx","../src/utils.ts","../src/index.ts"],"names":["_a","createContext","useContext","useMemo","jsx","React","useEffect","jsxs","memo","Track","useRef"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useRef, useEffect, useMemo } from \"react\";\nimport type { TrackProps, PlaylistProps } from \"../types\";\nimport { audioManager } from \"../utils/audioManager\";\n\ninterface SonorityState {\n  currentTrack: TrackProps | null;\n  currentPlaylist: PlaylistProps | null;\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  volume: number;\n  previousVolume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  isShuffled: boolean;\n  isRepeating: boolean;\n  isRepeatingOne: boolean;\n  queue: TrackProps[];\n}\n\ninterface AudioControls {\n  seek: (time: number) => void;\n  setVolume: (volume: number) => void;\n  setPlaybackRate: (rate: number) => void;\n}\n\ninterface SonorityContextValue {\n  state: SonorityState;\n  dispatch: React.Dispatch<SonorityAction>;\n  audioControls: AudioControls;\n}\n\nconst initialState = {\n  currentTrack: null,\n  currentPlaylist: null,\n  isPlaying: false,\n  currentTime: 0,\n  duration: 0,\n  volume: 1,\n  previousVolume: 1,\n  isMuted: false,\n  isShuffled: false,\n  isRepeating: false,\n  isRepeatingOne: false,\n  playbackRate: 1,\n  queue: [],\n};\n\nconst SonorityContext = createContext<SonorityContextValue | null>(null);\n\nexport function useSonoritySelector<Selected>(selector: (state: SonorityState) => Selected, equalityFn: (a: Selected, b: Selected) => boolean = Object.is): Selected {\n  const context = useContext(SonorityContext);\n  if (!context) throw new Error(\"useSonoritySelector must be used within SonorityProvider\");\n\n  const { state } = context;\n  return useMemo(() => selector(state), [selector(state)]);\n}\n\nexport const usePlaybackState = () => {\n  return useSonoritySelector((state) => ({\n    currentTime: state.currentTime,\n    duration: state.duration,\n  }));\n};\n\nexport const useTrackInfo = () => {\n  return useSonoritySelector((state) => ({\n    currentTrack: state.currentTrack,\n    isPlaying: state.isPlaying,\n  }));\n};\n\nexport const useVolumeState = () => {\n  return useSonoritySelector((state) => ({\n    volume: state.volume,\n    isMuted: state.isMuted,\n    previousVolume: state.previousVolume,\n  }));\n};\n\nexport const usePlaylistState = () => {\n  return useSonoritySelector((state) => ({\n    currentPlaylist: state.currentPlaylist,\n    queue: state.queue,\n    isShuffled: state.isShuffled,\n  }));\n};\n\nexport const usePlaybackControls = () => {\n  const context = useContext(SonorityContext);\n  if (!context) throw new Error(\"usePlaybackControls must be used within SonorityProvider\");\n  const { dispatch, audioControls } = context;\n  return { dispatch, audioControls };\n};\n\ntype SonorityAction = { type: \"SET_TRACK\"; payload: TrackProps } | { type: \"SET_PLAYLIST\"; payload: PlaylistProps } | { type: \"PLAY\" } | { type: \"PAUSE\" } | { type: \"SET_VOLUME\"; payload: number } | { type: \"SET_TIME\"; payload: number } | { type: \"SET_DURATION\"; payload: number } | { type: \"TOGGLE_SHUFFLE\" } | { type: \"TOGGLE_REPEAT\" } | { type: \"TOGGLE_REPEAT_ONE\" } | { type: \"NEXT_TRACK\" } | { type: \"PREVIOUS_TRACK\" } | { type: \"SET_QUEUE\"; payload: TrackProps[] } | { type: \"TOGGLE_MUTE\" } | { type: \"SET_MUTED\"; payload: boolean } | { type: \"SET_PLAYBACK_RATE\"; payload: number };\n\nconst sonorityReducer = (state: SonorityState, action: SonorityAction): SonorityState => {\n  switch (action.type) {\n    case \"SET_TRACK\": {\n      // Keep track in the context of current playlist/queue\n      return {\n        ...state,\n        currentTrack: action.payload,\n        currentTime: 0,\n      };\n    }\n    case \"TOGGLE_SHUFFLE\":\n      return {\n        ...state,\n        isShuffled: !state.isShuffled,\n        queue: state.isShuffled\n          ? [...state.queue].sort(() => Math.random() - 0.5) // Shuffle when turned on\n          : state.currentPlaylist?.tracks || state.queue, // Restore original order\n      };\n\n    case \"TOGGLE_REPEAT\":\n      return {\n        ...state,\n        isRepeating: !state.isRepeating,\n        isRepeatingOne: false, // Disable repeat one when toggling repeat\n      };\n\n    case \"SET_PLAYLIST\": {\n      const newTracks = action.payload.tracks || [];\n      // Keep current track if it exists in new playlist\n      const currentTrackInNewPlaylist = newTracks.find((track) => track.id === state.currentTrack?.id);\n\n      return {\n        ...state,\n        currentPlaylist: action.payload,\n        queue: newTracks,\n        currentTrack: currentTrackInNewPlaylist || state.currentTrack,\n        isShuffled: false,\n      };\n    }\n    case \"PLAY\":\n      return { ...state, isPlaying: true };\n    case \"PAUSE\":\n      return { ...state, isPlaying: false };\n    case \"SET_VOLUME\":\n      return { ...state, volume: action.payload };\n    case \"SET_TIME\":\n      return { ...state, currentTime: action.payload };\n    case \"SET_DURATION\":\n      return { ...state, duration: action.payload };\n    case \"SET_QUEUE\": {\n      const newQueue = Array.isArray(action.payload) ? action.payload : [];\n      return {\n        ...state,\n        queue: newQueue,\n      };\n    }\n    case \"NEXT_TRACK\": {\n      if (!state.queue.length) return state;\n\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const nextIndex = currentIndex + 1 >= state.queue.length ? 0 : currentIndex + 1;\n\n      return {\n        ...state,\n        currentTrack: state.queue[nextIndex],\n        currentTime: 0,\n      };\n    }\n\n    case \"PREVIOUS_TRACK\": {\n      if (!state.queue.length) return state;\n\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const prevIndex = currentIndex <= 0 ? state.queue.length - 1 : currentIndex - 1;\n\n      return {\n        ...state,\n        currentTrack: state.queue[prevIndex],\n        currentTime: 0,\n      };\n    }\n    case \"TOGGLE_MUTE\":\n      if (state.isMuted) {\n        // Unmuting - restore previous volume\n        return {\n          ...state,\n          isMuted: false,\n          volume: state.previousVolume,\n        };\n      } else {\n        return {\n          ...state,\n          isMuted: true,\n          previousVolume: state.volume,\n          volume: 0,\n        };\n      }\n    case \"SET_MUTED\":\n      return {\n        ...state,\n        isMuted: action.payload,\n        volume: action.payload ? 0 : state.previousVolume,\n      };\n    case \"SET_PLAYBACK_RATE\":\n      return {\n        ...state,\n        playbackRate: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SonorityProvider: React.FC<{ children: React.ReactNode; id: any }> = ({ children, id = crypto.randomUUID() }) => {\n  const [state, dispatch] = useReducer(sonorityReducer, initialState);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const playerIdRef = useRef(id);\n\n  useEffect(() => {\n    // Register this player with the audio manager\n    audioManager.registerPlayer(playerIdRef.current, () => {\n      dispatch({ type: \"PAUSE\" });\n    });\n\n    return () => {\n      audioManager.unregisterPlayer(playerIdRef.current);\n    };\n  }, []);\n  // Create audio element on mount\n  useEffect(() => {\n    audioRef.current = new Audio();\n    audioRef.current.preload = \"auto\";\n    // Enable CORS\n    audioRef.current.crossOrigin = \"anonymous\";\n\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current.src = \"\";\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    if (state.isPlaying) {\n      audioManager.notifyPlayStarted(playerIdRef.current);\n      audioRef.current.play().catch((error) => {\n        console.warn(\"Playback error:\", error);\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle track changes\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    const audio = audioRef.current;\n\n    // Setup new track\n    const setupNewTrack = () => {\n      audio.src = state.currentTrack?.src || \"\";\n      audio.load();\n      // Only auto-play if user has already started playback\n      if (state.isPlaying) {\n        audio.play().catch((error) => {\n          console.log(\"Playback prevented:\", error);\n          dispatch({ type: \"PAUSE\" });\n        });\n      }\n    };\n\n    // Event listeners\n    const handleLoadedMetadata = () => {\n      dispatch({ type: \"SET_DURATION\", payload: audio.duration });\n    };\n\n    const handleTimeUpdate = () => {\n      dispatch({ type: \"SET_TIME\", payload: audio.currentTime });\n    };\n\n    const handleEnded = () => {\n      if (state.isRepeatingOne) {\n        audio.currentTime = 0;\n        audio.play().catch(console.warn);\n      } else if (state.isRepeating) {\n        // If repeat all is on, go to next track or first track\n        const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n        const nextIndex = (currentIndex + 1) % state.queue.length;\n        dispatch({\n          type: \"SET_TRACK\",\n          payload: state.queue[nextIndex],\n        });\n      } else if (state.queue.length > 0) {\n        // Normal playlist progression\n        dispatch({ type: \"NEXT_TRACK\" });\n      } else {\n        dispatch({ type: \"PAUSE\" });\n      }\n    };\n\n    const handleError = (e: ErrorEvent) => {\n      console.warn(\"Audio error:\", e);\n      // Try to recover by reloading\n      audio.load();\n    };\n\n    // Add listeners\n    audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\n    audio.addEventListener(\"ended\", handleEnded);\n    audio.addEventListener(\"error\", handleError);\n\n    // Setup track\n    setupNewTrack();\n\n    return () => {\n      audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      audio.removeEventListener(\"ended\", handleEnded);\n      audio.removeEventListener(\"error\", handleError);\n    };\n  }, [state.currentTrack?.id]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    if (state.isPlaying) {\n      audioRef.current.play().catch((error) => {\n        if (error.name === \"NotAllowedError\") {\n          console.log(\"Playback prevented. Waiting for user interaction.\");\n        } else {\n          console.warn(\"Playback error:\", error);\n        }\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle volume\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = state.volume;\n    }\n  }, [state.volume]);\n\n  const audioControls = {\n    seek: (time: number) => {\n      if (audioRef.current) {\n        audioRef.current.currentTime = time;\n      }\n    },\n    setVolume: (volume: number) => {\n      if (audioRef.current) {\n        audioRef.current.volume = volume;\n      }\n    },\n    setPlaybackRate: (rate: number) => {\n      if (audioRef.current) {\n        audioRef.current.playbackRate = rate;\n      }\n    },\n  };\n\n  const value = {\n    state,\n    dispatch,\n    audioControls,\n  };\n\n  return (\n    <SonorityContext.Provider value={value}>\n      {children}\n      {state.currentTrack && (\n        <audio\n          ref={audioRef}\n          src={state.currentTrack.src}\n          preload=\"metadata\"\n        />\n      )}\n    </SonorityContext.Provider>\n  );\n};\n\nexport const useSonority = () => {\n  const context = useContext(SonorityContext);\n  if (!context) {\n    throw new Error(\"useSonority must be used within a SonorityProvider\");\n  }\n  return context;\n};\n","// src/utils/audioManager.ts\ntype PlayerCallback = () => void;\n\nclass AudioManager {\n  private static instance: AudioManager;\n  private currentPlayerId: string | null = null;\n  private callbacks: Map<string, PlayerCallback> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): AudioManager {\n    if (!AudioManager.instance) {\n      AudioManager.instance = new AudioManager();\n    }\n    return AudioManager.instance;\n  }\n\n  registerPlayer(playerId: string, pauseCallback: PlayerCallback) {\n    this.callbacks.set(playerId, pauseCallback);\n  }\n\n  unregisterPlayer(playerId: string) {\n    this.callbacks.delete(playerId);\n  }\n\n  notifyPlayStarted(playerId: string) {\n    if (this.currentPlayerId && this.currentPlayerId !== playerId) {\n      // Pause the previously playing player\n      const pauseCallback = this.callbacks.get(this.currentPlayerId);\n      if (pauseCallback) {\n        pauseCallback();\n      }\n    }\n    this.currentPlayerId = playerId;\n  }\n}\n\nexport const audioManager = AudioManager.getInstance();","// src/components/Current.tsx\nimport React, { createContext, useContext, memo } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport type { TrackProps } from \"../types\";\nimport { VolumeGraph, VolumeGraphProps } from \"./shared/VolumeGraph\";\n\nexport interface CurrentContextType {\n  currentTrack: TrackProps | null;\n}\n\nconst CurrentContext = createContext<CurrentContextType | null>(null);\n\n// Default context provider that allows subcomponents to be used independently\nconst CurrentContextProvider: React.FC<{\n  children: React.ReactNode;\n  className?: string;\n}> = ({ children, className }) => {\n  const { state } = useSonority();\n\n  const contextValue: CurrentContextType = {\n    currentTrack: state.currentTrack,\n  };\n\n  return (\n    <CurrentContext.Provider value={contextValue}>\n      <div className={className}>{children}</div>\n    </CurrentContext.Provider>\n  );\n};\n\nexport const Current:\n  | React.FC<{\n      children?: React.ReactNode | any;\n      className?: string | any;\n    }>\n  | (any & {\n      Cover: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Track: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Artist: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Album: React.FC<{ className?: string; children?: React.ReactNode }>;\n      WrittenBy: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Copyright: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Genre: React.FC<{ className?: string; children?: React.ReactNode }>;\n      CurrentTime: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Duration: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Year: React.FC<{ className?: string; children?: React.ReactNode }>;\n    }) = Object.assign(({ children, className }: { children?: React.ReactNode; className?: string }) => <CurrentContextProvider className={className}>{children || <Current.Track />}</CurrentContextProvider>, {\n  Provider: CurrentContextProvider,\n});\n\n// Utility hook to access current track context\nconst useCurrentContext = () => {\n  const context = useContext(CurrentContext);\n  if (!context) {\n    // If no context is available, use the global Sonority state\n    const { state } = useSonority();\n    return { currentTrack: state.currentTrack };\n  }\n  return context;\n};\n\n// Subcomponent definitions\nconst createSubcomponent = (propName: keyof TrackProps, defaultRenderer?: (track: TrackProps) => React.ReactNode) => {\n  return ({ className, children }: { className?: string; children?: React.ReactNode }) => {\n    const { currentTrack } = useCurrentContext();\n\n    // If children are explicitly provided, use them\n    if (children)\n      return (\n        <div\n          data-sonority-component={`Current.${propName}`}\n          className={className}>\n          {children}\n        </div>\n      );\n\n    // Use default renderer if provided\n    if (defaultRenderer && currentTrack) {\n      const renderedContent = defaultRenderer(currentTrack);\n      return renderedContent ? (\n        <div\n          data-sonority-component={`Current.${propName}`}\n          className={className}>\n          {renderedContent}\n        </div>\n      ) : null;\n    }\n\n    // Default rendering based on prop\n    return currentTrack && currentTrack[propName] ? (\n      <div\n        data-sonority-component={`Current.${propName}`}\n        className={className}>\n        {currentTrack[propName] as any}\n      </div>\n    ) : null;\n  };\n};\n\n// Attach subcomponents\nCurrent.Cover = createSubcomponent(\"image\", (track) =>\n  track.image ? (\n    <img\n      src={track.image.src}\n      alt={track.image.alt || \"Album Cover\"}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n      }}\n    />\n  ) : null\n);\n\nCurrent.VolumeGraph = ({ className, ...props }: VolumeGraphProps) => {\n  const { currentTrack } = useCurrentContext();\n\n  if (!currentTrack) return null;\n\n  return (\n    <div\n      data-sonority-component=\"Current.VolumeGraph\"\n      className={className}>\n      <VolumeGraph\n        {...props}\n        trackId={currentTrack.id}\n      />\n    </div>\n  );\n};\n\nCurrent.Track = createSubcomponent(\"title\");\nCurrent.Artist = createSubcomponent(\"artist\");\nCurrent.Album = createSubcomponent(\"album\");\nCurrent.WrittenBy = createSubcomponent(\"writtenBy\");\nCurrent.Copyright = createSubcomponent(\"copyright\");\nCurrent.Genre = createSubcomponent(\"genre\");\nCurrent.Year = createSubcomponent(\"year\");\nCurrent.Duration = createSubcomponent(\"duration\");\nCurrent.CurrentTime = createSubcomponent(\"currentTime\");\n\nexport default Current;","import React, { useMemo } from \"react\";\nimport { useSonority } from \"../../context/SonorityContext\";\n\nexport interface VolumeGraphProps {\n  width?: number;\n  height?: number;\n  stroke?: string;\n  strokeWidth?: number;\n  strokeLineCap?: \"butt\" | \"round\" | \"square\";\n  gap?: number;\n  className?: string;\n  trackId?: string;\n}\n\nexport const VolumeGraph: React.FC<VolumeGraphProps> = ({ width, height, stroke = \"#707070\", strokeWidth = 1, strokeLineCap = \"round\", gap = 22, className, trackId }) => {\n  const { state } = useSonority();\n\n  // Default viewBox dimensions\n  const defaultWidth = 404;\n  const defaultHeight = 211;\n\n  // Generate sample volume data only once on mount using useMemo\n  const volumeData = useMemo(() => {\n    const counts = Math.floor((width || defaultWidth) / gap);\n    const isCurrent = trackId === state.currentTrack?.id;\n\n    return Array.from({ length: counts }, () => (isCurrent ? Math.random() * 0.8 + 0.4 : Math.random() * 0.6 + 0.2));\n  }, []); // Empty dependency array means it only runs once on mount\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={width || \"100%\"}\n      height={height || \"100%\"}\n      viewBox={`0 0 ${defaultWidth} ${defaultHeight}`}\n      preserveAspectRatio=\"xMidYMid meet\"\n      className={className}>\n      <g>\n        {volumeData.map((volume, index) => {\n          const x = gap + index * gap;\n          const lineHeight = volume * defaultHeight * 0.6;\n          const y1 = (defaultHeight - lineHeight) / 2;\n          const y2 = y1 + lineHeight;\n\n          return (\n            <line\n              key={index}\n              x1={x}\n              y1={y1}\n              x2={x}\n              y2={y2}\n              stroke={stroke}\n              strokeWidth={strokeWidth}\n              strokeLinecap={strokeLineCap}\n            />\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n","// src/components/Control.tsx\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport * as Slider from \"@radix-ui/react-slider\";\nimport * as Select from \"@radix-ui/react-select\";\n\nexport interface ControlContextType {\n  state: any;\n  dispatch: any;\n  audioControls: any;\n}\n\ninterface SpeedRenderProps {\n  speeds: number[];\n  currentSpeed: number;\n  setSpeed: (speed: number) => void;\n}\n\ninterface ControlSpeedProps {\n  className?: string;\n  children?: React.ReactNode | ((props: SpeedRenderProps) => React.ReactNode);\n  options?: SpeedControlOptions;\n}\n\ninterface SpeedControlOptions {\n  min?: number;\n  max?: number;\n  default?: number;\n  steps?: number;\n  variant?: \"range\" | \"select\" | \"buttons\";\n}\n\nconst ControlContext = createContext<ControlContextType | null>(null);\n\n// Default context provider that allows subcomponents to be used independently\nconst ControlContextProvider: React.FC<{\n  children: React.ReactNode;\n  className?: string;\n}> = ({ children, className }) => {\n  const { state, dispatch, audioControls } = useSonority();\n\n  const contextValue: ControlContextType = {\n    state,\n    dispatch,\n    audioControls,\n  };\n\n  return (\n    <ControlContext.Provider value={contextValue}>\n      <div\n        data-sonority-component=\"control\"\n        className={className}>\n        {children}\n      </div>\n    </ControlContext.Provider>\n  );\n};\n\nexport const Control:\n  | any\n  | (React.FC<{\n      children?: React.ReactNode;\n      className?: string;\n    }> & {\n      Play: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Pause: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Previous: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Next: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Seek: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Volume: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Shuffle: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Repeat: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Mute: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Speed: React.FC<{\n        className?: string;\n        children?: React.ReactNode;\n        options?: SpeedControlOptions;\n      }>;\n    }) = Object.assign(({ children, className }: { children?: React.ReactNode; className?: string }) => <ControlContextProvider className={className}>{children}</ControlContextProvider>, {\n  Provider: ControlContextProvider,\n});\n\n// Utility hook to access control context\nconst useControlContext = () => {\n  const context = useContext(ControlContext);\n  if (!context) {\n    // If no context is available, use the global Sonority state\n    const { state, dispatch, audioControls } = useSonority();\n    return { state, dispatch, audioControls };\n  }\n  return context;\n};\n\n// Subcomponent for Play/Pause\n\ninterface PlayProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nControl.Play = ({ className, children }: PlayProps) => {\n  const { state, dispatch } = useControlContext();\n\n  const handlePlayPause = () => {\n    if (!state.currentTrack && state.queue.length > 0) {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: state.queue[0],\n      });\n    }\n    dispatch({ type: state.isPlaying ? \"PAUSE\" : \"PLAY\" });\n  };\n\n  return (\n    <button\n      data-sonority-component={`Control.Play`}\n      onClick={handlePlayPause}\n      className={className}>\n      {children || (state.isPlaying ? \"Pause\" : \"Play\")}\n    </button>\n  );\n};\n\ninterface PreviousProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Previous Track\nControl.Previous = ({ className, children }: PreviousProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      data-sonority-component={`Control.Previous`}\n      onClick={() => dispatch({ type: \"PREVIOUS_TRACK\" })}\n      className={className}\n      disabled={state.queue.length <= 1}>\n      {children || \"Previous\"}\n    </button>\n  );\n};\n\ninterface NextProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Next Track\nControl.Next = ({ className, children }: NextProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      data-sonority-component={`Control.Next`}\n      onClick={() => dispatch({ type: \"NEXT_TRACK\" })}\n      className={className}\n      data-sonority-next={state.queue.length <= 1}\n      disabled={state.queue.length <= 1}>\n      {children || \"Next\"}\n    </button>\n  );\n};\n\ninterface SeekProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Seek\nControl.Seek = ({ className, children }: SeekProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n\n  return (\n    <Slider.Root\n      data-sonority-component={`Control.Seek`}\n      style={{\n        width: \"100%\",\n        height: \"10px\",\n        position: \"relative\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        touchAction: \"none\",\n        userSelect: \"none\",\n      }}\n      value={[state.currentTime]}\n      onValueChange={(value) => {\n        if (audioControls?.seek && value.length > 0) {\n          audioControls.seek(value[0]);\n          dispatch({ type: \"SET_TIME\", payload: value[0] });\n        }\n      }}\n      max={state.duration || 0}\n      step={0.1}>\n      <Slider.Track\n        style={{\n          position: \"relative\",\n          flexGrow: 1,\n          height: \"2px\",\n          backgroundColor: \"currentColor\",\n          borderRadius: \"9999px\",\n        }}>\n        <Slider.Range\n          style={{\n            position: \"absolute\",\n            height: \"100%\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n            left: 0,\n            right: 0,\n          }}\n        />\n      </Slider.Track>\n      <Slider.Thumb\n        style={{\n          display: \"block\",\n          width: \"12px\",\n          height: \"12px\",\n          minHeight: \"12px\",\n          minWidth: \"12px\",\n          backgroundColor: \"rgba(0,0,0,1)\",\n          border: \"2px solid currentColor\",\n          outline: \"none\",\n          borderRadius: \"9999px\",\n          transition: \"background-color 0.2s, left 0.1s\",\n        }}\n        aria-label=\"Seek\"\n      />\n    </Slider.Root>\n  );\n};\n\ninterface VolumeProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface MuteProps {\n  className?: string;\n  children?: React.ReactNode;\n  initialMuted?: boolean;\n}\n\nControl.Mute = ({ className, children, initialMuted = false }: MuteProps) => {\n  const { state, dispatch } = useControlContext();\n\n  // Set initial mute state\n  useEffect(() => {\n    if (initialMuted) {\n      dispatch({ type: \"SET_MUTED\", payload: true });\n    }\n  }, []);\n\n  const handleMute = () => {\n    dispatch({ type: \"TOGGLE_MUTE\" });\n  };\n\n  return (\n    <button\n      data-sonority-component={`Control.Mute`}\n      onClick={handleMute}\n      className={className}\n      aria-label={state.isMuted ? \"Unmute\" : \"Mute\"}\n      title={state.isMuted ? \"Unmute\" : \"Mute\"}>\n      {children || (state.isMuted ? \"Unmute\" : \"Mute\")}\n    </button>\n  );\n};\n\ninterface ControlSpeedProps {\n  className?: string;\n  children?: React.ReactNode | ((props: SpeedRenderProps) => React.ReactNode);\n  options?: SpeedControlOptions;\n}\n\nControl.Speed = ({ className, options = {}, children }: ControlSpeedProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n  const { min = 0, max = 2, default: defaultValue = 1, steps: steps = 0.5, variant = \"range\" } = options;\n\n  const speeds = React.useMemo(() => {\n    const count = (max - min) / steps + 1;\n    return Array.from({ length: count }, (_, i) => min + i * steps);\n  }, [min, max, steps]);\n\n  const handleSpeedChange = (speed: number) => {\n    dispatch({ type: \"SET_PLAYBACK_RATE\", payload: speed });\n    if (audioControls?.setPlaybackRate) {\n      audioControls.setPlaybackRate(speed);\n    }\n  };\n\n  if (variant === \"buttons\" && typeof children === \"function\") {\n    return (children as (props: SpeedRenderProps) => React.ReactNode)({\n      speeds,\n      currentSpeed: state.playbackRate ?? defaultValue,\n      setSpeed: handleSpeedChange,\n    });\n  }\n\n  if (variant === \"range\") {\n    return (\n      <Slider.Root\n        style={{\n          width: \"100%\",\n          height: \"10px\",\n          position: \"relative\",\n          cursor: \"pointer\",\n          display: \"flex\",\n          alignItems: \"center\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n        }}\n        data-sonority-component={`Control.Speed?variant=range`}\n        value={[state.playbackRate ?? defaultValue]}\n        min={min}\n        max={max}\n        step={steps}\n        onValueChange={([value]) => handleSpeedChange(value)}\n        className={className}>\n        <Slider.Track\n          style={{\n            position: \"relative\",\n            flexGrow: 1,\n            height: \"2px\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n          }}>\n          <Slider.Range\n            style={{\n              position: \"absolute\",\n              height: \"100%\",\n              backgroundColor: \"currentColor\",\n              borderRadius: \"9999px\",\n            }}\n          />\n        </Slider.Track>\n        <Slider.Thumb\n          style={{\n            display: \"block\",\n            width: \"12px\",\n            height: \"12px\",\n            minHeight: \"12px\",\n            minWidth: \"12px\",\n            backgroundColor: \"rgba(0,0,0,1)\",\n            border: \"2px solid currentColor\",\n            outline: \"none\",\n            borderRadius: \"9999px\",\n            transition: \"background-color 0.2s, left 0.1s\",\n          }}\n          aria-label=\"Speed\"\n        />\n      </Slider.Root>\n    );\n  }\n\n  if (variant === \"select\") {\n    return (\n      <select\n        data-sonority-component={`Control.Speed?variant=select`}\n        className={className}\n        value={state.playbackRate ?? defaultValue}\n        onChange={(e) => handleSpeedChange(Number(e.target.value))}>\n        {speeds.map((speed) => (\n          <option\n            key={speed}\n            value={speed}>\n            {speed}x\n          </option>\n        ))}\n      </select>\n    );\n  }\n\n  if (variant === \"buttons\") {\n    if (typeof children === \"function\") {\n      return children({\n        speeds,\n        currentSpeed: state.playbackRate ?? defaultValue,\n        setSpeed: handleSpeedChange,\n      });\n    }\n\n    return (\n      <div className={`flex gap-2 ${className}`}>\n        {speeds.map((speed) => (\n          <button\n            data-sonority-component={`Control.Speed?variant=buttons`}\n            key={speed}\n            onClick={() => handleSpeedChange(speed)}\n            className={`px-2 py-1 rounded ${(state.playbackRate ?? defaultValue) === speed ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}>\n            {speed}x\n          </button>\n        ))}\n      </div>\n    );\n  }\n\n  return null;\n};\n\ninterface ControlVolumeProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Volume\nControl.Volume = ({ className }: VolumeProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n\n  return (\n    <Slider.Root\n      data-sonority-component={`Control.Volume`}\n      className={className}\n      style={{\n        width: \"100%\",\n        height: \"10px\",\n        position: \"relative\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        touchAction: \"none\",\n        userSelect: \"none\",\n      }}\n      value={[state.volume]}\n      max={1}\n      step={0.01}\n      onValueChange={(value) => {\n        if (value.length > 0) {\n          dispatch({ type: \"SET_VOLUME\", payload: value[0] });\n          audioControls.setVolume(value[0]);\n        }\n      }}>\n      <Slider.Track\n        style={{\n          position: \"relative\",\n          flexGrow: 1,\n          height: \"2px\",\n          backgroundColor: \"currentColor\",\n          borderRadius: \"9999px\",\n        }}>\n        <Slider.Range\n          style={{\n            position: \"absolute\",\n            height: \"100%\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n            left: 0,\n            right: 0,\n          }}\n        />\n      </Slider.Track>\n      <Slider.Thumb\n        style={{\n          display: \"block\",\n          width: \"12px\",\n          height: \"12px\",\n          minHeight: \"12px\",\n          minWidth: \"12px\",\n          backgroundColor: \"rgba(0,0,0,1)\",\n          border: \"2px solid currentColor\",\n          outline: \"none\",\n          borderRadius: \"9999px\",\n          transition: \"background-color 0.2s, left 0.1s\",\n        }}\n        aria-label=\"Volume\"\n      />\n    </Slider.Root>\n  );\n};\n\ninterface ShuffleProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface ControlRepeatProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n// Subcomponent for Shuffle\nControl.Shuffle = ({ className, children }: ShuffleProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      data-sonority-component={`Control.Shuffle`}\n      onClick={() => dispatch({ type: \"TOGGLE_SHUFFLE\" })}\n      className={className}>\n      {children || \"Shuffle\"}\n    </button>\n  );\n};\n\ninterface RepeatProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Repeat\nControl.Repeat = ({ className, children }: RepeatProps) => {\n  const { state, dispatch } = useControlContext();\n\n  const handleRepeat = () => {\n    // Cycle through repeat modes\n    if (!state.isRepeating && !state.isRepeatingOne) {\n      dispatch({ type: \"TOGGLE_REPEAT\" });\n    } else if (state.isRepeating) {\n      dispatch({ type: \"TOGGLE_REPEAT\" });\n      dispatch({ type: \"TOGGLE_REPEAT_ONE\" });\n    } else if (state.isRepeatingOne) {\n      dispatch({ type: \"TOGGLE_REPEAT_ONE\" });\n    }\n  };\n\n  return (\n    <button\n      data-sonority-component={`Control.Repeat`}\n      onClick={handleRepeat}\n      className={className}>\n      {children || \"Repeat\"}\n    </button>\n  );\n};\n\nexport default Control;","import React, { useEffect } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport { Track, TrackProps } from \"./Track\";\n\nexport interface PlaylistProps {\n  name: string;\n  id: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\n// In Playlist.tsx\nexport const Playlist: React.FC<PlaylistProps> = ({ name, id, children, className }) => {\n  const { dispatch } = useSonority();\n\n  // Single initialization effect\n  useEffect(() => {\n    const trackElements = React.Children.toArray(children).filter(\n      (child) => React.isValidElement(child) && child.type === Track\n    );\n\n    const extractedTracks = trackElements.map((track: any) => ({\n      ...track.props,\n      id: track.props.id || crypto.randomUUID(),\n    }));\n\n    // Initialize playlist and queue together\n    dispatch({\n      type: \"SET_PLAYLIST\",\n      payload: {\n        id,\n        name,\n        tracks: extractedTracks,\n      },\n    });\n  }, [id, name, children]); // Add children to dependencies\n\n  const handleTrackSelect = (trackProps: TrackProps) => {\n    dispatch({\n      type: \"SET_TRACK\",\n      payload: trackProps,\n    });\n  };\n\n  return (\n    <div\n      data-sonority-component=\"Playlist\"\n      data-sonority-playlist-id={id}\n      data-sonority-playlist-name={name}\n      className={className}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Track) {\n          return React.cloneElement(child, {\n            ...child.props,\n            onClick: () => handleTrackSelect(child.props),\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};","import React, { createContext, useContext, memo } from \"react\";\nimport { useTrackInfo, usePlaybackControls } from \"../context/SonorityContext\";\nimport { VolumeGraph, VolumeGraphProps } from \"./shared/VolumeGraph\";\n\nexport interface TrackProps {\n  className?: string;\n  title: string;\n  artist?: string;\n  writtenBy?: string;\n  album?: string;\n  image?: { src: string; alt?: string };\n  src: string;\n  copyright: string;\n  id: string;\n  onClick?: () => void;\n  children?: React.ReactNode;\n  coverWidth?: number;\n  coverClassName?: string;\n  genre?: string;\n  year?: number;\n  duration?: number;\n  [key: string]: any;\n}\n\n// Create a context to share track information\nconst TrackContext = createContext<TrackProps | null>(null);\n\nexport const Track = memo(\n  ({\n    className,\n    title,\n    artist,\n    writtenBy,\n    album,\n    image,\n    src,\n    id,\n    onClick,\n    children,\n    coverWidth = 32,\n    coverClassName = \"\",\n    genre,\n    year,\n    duration,\n    copyright,\n    ...props\n  }: TrackProps &\n    (any & {\n      Cover: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Track: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Artist: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Album: React.FC<{ className?: string; children?: React.ReactNode }>;\n      WrittenBy: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Copyright: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Genre: React.FC<{ className?: string; children?: React.ReactNode }>;\n      CurrentTime: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Duration: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Year: React.FC<{ className?: string; children?: React.ReactNode }>;\n    })) => {\n    const { currentTrack } = useTrackInfo();\n    const { dispatch } = usePlaybackControls();\n    const isCurrentTrack = currentTrack?.id === id;\n\n    const handleTrackClick = () => {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: {\n          id,\n          title,\n          artist,\n          writtenBy,\n          album,\n          image,\n          src,\n          copyright,\n          genre,\n          year,\n          duration,\n          ...props,\n        },\n      });\n      onClick?.();\n    };\n\n    const contextValue = {\n      title,\n      artist,\n      writtenBy,\n      album,\n      image,\n      copyright,\n      src,\n      id,\n      genre,\n      year,\n      duration,\n      ...props,\n    };\n\n    return (\n      <TrackContext.Provider value={contextValue}>\n        <button\n          data-sonority-component=\"Track\"\n          data-sonority-current={isCurrentTrack}\n          className={className}\n          onClick={handleTrackClick}>\n          {children || (\n            <>\n              <Track.Cover />\n              <div>\n                <Track.Title />\n                <Track.Artist />\n                {writtenBy && <Track.WrittenBy />}\n                {copyright && (\n                  <p>\n                    &copy; <Track.Copyright />\n                  </p>\n                )}\n                {album && <Track.Album />}\n              </div>\n            </>\n          )}\n        </button>\n      </TrackContext.Provider>\n    );\n  }\n);\n\n// Hook to access track context\n\nconst useTrackContext = () => {\n  const context = useContext(TrackContext);\n  if (!context) {\n    throw new Error(\"Track components must be rendered inside a Track component\");\n  }\n  return context;\n};\n\n// Helper function to format duration\nconst formatDuration = (duration?: number) => {\n  if (!duration) return \"\";\n  const minutes = Math.floor(duration / 60);\n  const seconds = Math.floor(duration % 60);\n  return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n};\n\n// Title Subcomponent\nTrack.Title = memo(({ className, children }: { className?: string; children?: React.ReactNode }) => {\n  const track = useTrackContext();\n\n  return (\n    <span\n      data-sonority-component=\"Track.Title\"\n      className={className}\n      style={{ textAlign: \"start\" }}>\n      {children || track.title}\n    </span>\n  );\n});\n\n// Artist Subcomponent\nTrack.Artist = memo(({ className, children }: { className?: string; children?: React.ReactNode }) => {\n  const track = useTrackContext();\n\n  if (children) return <p className={className}>{children}</p>;\n  return track.artist ? <p className={className}>{track.artist}</p> : null;\n});\n\n// WrittenBy Subcomponent\nTrack.WrittenBy = memo(({ className, children }: { className?: string; children?: React.ReactNode }) => {\n  const track = useTrackContext();\n\n  return (\n    <span\n      data-sonority-component=\"Track.WrittenBy\"\n      className={className}>\n      {children || track.writtenBy}\n    </span>\n  );\n});\n\nTrack.VolumeGraph = ({ className, ...props }: VolumeGraphProps) => {\n  const track = useTrackContext();\n\n  return (\n    <div\n      data-sonority-component=\"Track.VolumeGraph\"\n      className={className}>\n      <VolumeGraph\n        {...props}\n        trackId={track.id}\n      />\n    </div>\n  );\n};\n\n// Album Subcomponent\nTrack.Album = memo(({ className, children }: { className?: string; children?: React.ReactNode }) => {\n  const track = useTrackContext();\n\n  return track.album ? (\n    <span\n      data-sonority-component=\"Track.Album\"\n      className={className}>\n      {children || track.album}\n    </span>\n  ) : null;\n});\n\n// Genre Subcomponent\nTrack.Genre = ({ className, children }: any) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children)\n    return (\n      <span\n        data-sonority-component={`Track.Genre`}\n        className={className}>\n        {children}\n      </span>\n    );\n\n  // Default genre rendering (only if genre exists)\n  return track.genre ? (\n    <span\n      data-sonority-component={`Track.Genre`}\n      className={className}>\n      {track.genre}\n    </span>\n  ) : null;\n};\n\n// Year Subcomponent\nTrack.Year = ({ className, children }: any) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children)\n    return (\n      <span\n        data-sonority-component={`Track.Year`}\n        className={className}>\n        {children}\n      </span>\n    );\n\n  // Default year rendering (only if year exists)\n  return track.year ? (\n    <span\n      data-sonority-component={`Track.Year`}\n      className={className}>\n      {track.year}\n    </span>\n  ) : null;\n};\n\n// Duration Subcomponent\nTrack.Duration = ({ className, children }: any) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children)\n    return (\n      <span\n        data-sonority-component={`Track.Duration`}\n        className={className}>\n        {children}\n      </span>\n    );\n\n  // Default duration rendering (only if duration exists)\n  return track.duration ? (\n    <span\n      data-sonority-component={`Track.Duration`}\n      className={className}>\n      {formatDuration(track.duration)}\n    </span>\n  ) : null;\n};\n\nTrack.CurrentTime = ({ className, children }: any) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children)\n    return (\n      <p\n        data-sonority-component={`Track.CurrentTime`}\n        className={className}>\n        {children}\n      </p>\n    );\n\n  // Default duration rendering (only if duration exists)\n  return track.currentTime ? (\n    <span\n      data-sonority-component={`Track.CurrentTime`}\n      className={className}>\n      {formatDuration(track.currentTime)}\n    </span>\n  ) : null;\n};\n\n// Cover Subcomponent\nTrack.Cover = memo(({ className, imgClassName, altClassName }: { className?: string; imgClassName?: string; altClassName?: string }) => {\n  const track = useTrackContext();\n\n  return track.image ? (\n    <figure className={className}>\n      <img\n        data-sonority-component=\"Track.Cover\"\n        src={track.image.src}\n        alt={track.image.alt || track.title}\n        className={imgClassName}\n        style={{\n          minWidth: \"100%\",\n          minHeight: \"100%\",\n          width: \"100%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n        }}\n      />\n      {track.image.alt && (\n        <figcaption\n          hidden\n          className={altClassName}>\n          {track.image.alt}\n        </figcaption>\n      )}\n    </figure>\n  ) : null;\n});\n\n// Custom Property Subcomponent\nTrack.CustomProperty = ({ name, className, children }: any) => {\n  const track = useTrackContext();\n\n  // Check if the custom property exists\n  const propertyValue = track[name];\n\n  // If children are explicitly provided, use them\n  if (children)\n    return (\n      <p\n        data-sonority-component={`Track.CustomProperty`}\n        className={className}>\n        {children}\n      </p>\n    );\n\n  // Render custom property if it exists\n  return propertyValue ? (\n    <p\n      className={className}\n      data-sonority-component={`Track.CustomProperty`}>\n      {name}: {propertyValue.toString()}\n    </p>\n  ) : null;\n};\n\nexport default Track;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\n\ninterface VisualizerProps {\n  className?: string;\n  variant?: \"waves\" | \"lines\" | \"bars\" | \"circle\" | \"equalizer\" | \"none\" | undefined;\n  width?: number;\n  height?: number;\n  color?: string;\n}\n\n/**\n * \n * @param variant - The type of visualizer to render. Can be \"waves\", \"lines\", \"bars\", \"circle\", \"equalizer\", or \"none\".\n * @param className - Additional CSS classes to apply to the canvas element.\n * @param width - The width of the visualizer canvas.\n * @param height - The height of the visualizer canvas.\n * @param color - The color of the visualizer bars, lines, or waves.\n * @returns A visualizer component that renders audio frequency data in a canvas element.\n * @example\n * ```tsx\n * <Visualizer variant=\"bars\" width={300} height={150} color=\"#4ade80\" />\n * ```\n * \n */\nexport const Visualizer = ({ variant = \"bars\", className = \"\", width = 300, height = 150, color = \"#4ade80\" }: VisualizerProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [analyser, setAnalyser] = useState<AnalyserNode | null>(null);\n  const [dataArray, setDataArray] = useState<Uint8Array | null>(null);\n  const animationFrameRef = useRef<number>();\n\n  useEffect(() => {\n    // Create audio context and analyzer\n    const initAudio = async () => {\n      const audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const analyzerNode = audioCtx.createAnalyser();\n      analyzerNode.fftSize = 256;\n\n      try {\n        const {state} = useSonority();\n        // Get audio element (assuming it exists in the DOM with data-sonority-audio)\n        const audioElement = document.querySelector(`[data-sonority-audio=${state.currentTrack?.src}]`) as HTMLAudioElement;\n        if (audioElement) {\n          const source = audioCtx.createMediaElementSource(audioElement);\n          source.connect(analyzerNode);\n          analyzerNode.connect(audioCtx.destination);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to audio source:\", error);\n      }\n\n      setAudioContext(audioCtx);\n      setAnalyser(analyzerNode);\n      setDataArray(new Uint8Array(analyzerNode.frequencyBinCount));\n    };\n\n    initAudio();\n\n    return () => {\n      if (audioContext) {\n        audioContext.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  const drawBars = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    const barWidth = width / data.length;\n    ctx.clearRect(0, 0, width, height);\n\n    for (let i = 0; i < data.length; i++) {\n      const barHeight = (data[i] / 255) * height;\n      ctx.fillStyle = color;\n      ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);\n    }\n  };\n\n  const drawWaves = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    ctx.beginPath();\n    ctx.moveTo(0, height / 2);\n\n    for (let i = 0; i < data.length; i++) {\n      const x = (i / data.length) * width;\n      const y = ((data[i] / 255) * height) / 2 + height / 4;\n      ctx.lineTo(x, y);\n    }\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawCircle = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const radius = Math.min(width, height) / 4;\n\n    ctx.beginPath();\n    for (let i = 0; i < data.length; i++) {\n      const angle = (i / data.length) * Math.PI * 2;\n      const amplitude = (data[i] / 255) * radius;\n      const x = centerX + (radius + amplitude) * Math.cos(angle);\n      const y = centerY + (radius + amplitude) * Math.sin(angle);\n\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawLines = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const lineSpacing = width / (data.length - 1);\n\n    ctx.beginPath();\n    for (let i = 0; i < data.length; i++) {\n      const x = i * lineSpacing;\n      const amplitude = (data[i] / 255) * height;\n      ctx.moveTo(x, height);\n      ctx.lineTo(x, height - amplitude);\n    }\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawEqualizer = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const barWidth = width / 32;\n    const smoothedData = new Array(32).fill(0);\n\n    // Average the frequency data to get smoother bars\n    for (let i = 0; i < 32; i++) {\n      const dataIndex = Math.floor((i / 32) * data.length);\n      smoothedData[i] = data[dataIndex];\n    }\n\n    for (let i = 0; i < 32; i++) {\n      const barHeight = (smoothedData[i] / 255) * height;\n      const gradient = ctx.createLinearGradient(0, height - barHeight, 0, height);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(1, color + \"44\");\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);\n    }\n  };\n\n  useEffect(() => {\n    if (!analyser || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const data = new Uint8Array(analyser.frequencyBinCount);\n\n    const draw = () => {\n      analyser.getByteFrequencyData(data);\n\n      switch (variant) {\n        case \"waves\":\n          drawWaves(ctx, data);\n          break;\n        case \"lines\":\n          drawLines(ctx, data);\n          break;\n        case \"circle\":\n          drawCircle(ctx, data);\n          break;\n        case \"equalizer\":\n          drawEqualizer(ctx, data);\n          break;\n        case \"bars\":\n        default:\n          drawBars(ctx, data);\n          break;\n      }\n\n      animationFrameRef.current = requestAnimationFrame(draw);\n    };\n\n    draw();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [analyser, variant, color, width, height]);\n\n  return (\n    <canvas\n      data-sonority-component={`Visualizer?is=${variant?.toString()}`}\n      ref={canvasRef}\n      width={width}\n      height={height}\n      className={className}\n    />\n  );\n};\n","import React from \"react\";\nimport { SonorityProvider } from \"../context/SonorityContext\";\nimport { Current } from \"./Current\";\nimport { Control } from \"./Control\";\nimport { Playlist } from \"./Playlist\";\nimport { Track } from \"./Track\";\nimport { Visualizer } from \"./Visualizer\";\n\ninterface SonorityProps {\n  variant?: \"single\" | \"playlist\" | \"multiPlaylist\";\n  className?: string;\n  children: React.ReactNode | any;\n  [key: string]: any;\n}\n\nconst SonorityBase: React.FC<SonorityProps> = ({ variant = \"single\", className, children }) => {\n  return (\n    <div\n      data-sonority-component=\"player\"\n      data-sonority-variant={variant}\n      className={className}>\n      {children}\n    </div>\n  );\n};\n\nconst Sonority: SonorityProps | any = Object.assign(\n  ({ variant, className, children }: SonorityProps | any) => (\n    <SonorityProvider id>\n      <SonorityBase\n        data-sonority-component={`Root`}\n        variant={variant}\n        className={className}>\n        {children}\n      </SonorityBase>\n    </SonorityProvider>\n  ),\n  {\n    Current,\n    Control,\n    Playlist,\n    Track,\n    Visualizer,\n  }\n);\n\nexport { Sonority };\nexport default Sonority;\n","import { TrackProps, PlaylistProps } from \"./types\";\n\nexport const createPlaylist = (tracks: TrackProps[], name?: string): PlaylistProps => ({\n  id: crypto.randomUUID(),\n  name,\n  tracks,\n});\n\nexport const mergePlaylists = (playlists: PlaylistProps[]): PlaylistProps => ({\n  id: crypto.randomUUID(),\n  name: \"Merged Playlist\",\n  tracks: playlists.flatMap((playlist) => playlist.tracks || []),\n});\n\nexport const filterPlaylist = (playlist: PlaylistProps, predicate: (track: TrackProps) => boolean): PlaylistProps => ({\n  ...playlist,\n  tracks: playlist.tracks?.filter(predicate) || [],\n});\n\nexport const sortPlaylist = (playlist: PlaylistProps, order: \"asc\" | \"desc\" | \"dateAdded\" | \"artist\" | \"copyright\" | \"writtenBy\"): PlaylistProps => ({\n  ...playlist,\n  tracks:\n    playlist.tracks?.sort((a, b) => {\n      if (order === \"asc\") {\n        return a[order] > b[order] ? 1 : -1;\n      }\n      if (order === \"desc\") {\n        return a[order] < b[order] ? 1 : -1;\n      }\n      return 0;\n    }) || [],\n});\n\nexport const shufflePlaylist = (playlist: PlaylistProps): PlaylistProps => ({\n  ...playlist,\n  tracks: playlist.tracks?.sort(() => Math.random() - 0.5) || [],\n});\n\nexport const toggleMute = (audio: HTMLAudioElement) => {\n  audio.muted = !audio.muted;\n};\n\nexport const toggleLoop = (audio: HTMLAudioElement) => {\n  audio.loop = !audio.loop;\n};\n\nexport const togglePlaybackRate = (audio: HTMLAudioElement) => {\n  audio.playbackRate = audio.playbackRate === 1 ? 2 : 1;\n};\n\nexport const toggleControls = (audio: HTMLAudioElement) => {\n  audio.controls = !audio.controls;\n};\n\nexport const toggleAutoplay = (audio: HTMLAudioElement) => {\n  audio.autoplay = !audio.autoplay;\n};\n\nexport const togglePreload = (audio: HTMLAudioElement) => {\n  audio.preload = audio.preload === \"none\" ? \"auto\" : \"none\";\n};\n\nexport const toggleCrossOrigin = (audio: HTMLAudioElement) => {\n  audio.crossOrigin = audio.crossOrigin === \"anonymous\" ? \"use-credentials\" : \"anonymous\";\n};\n\nexport const audioState = (audio: HTMLAudioElement) => {\n  return {\n    currentTime: audio.currentTime,\n    duration: audio.duration,\n    ended: audio.ended,\n    error: audio.error,\n    loop: audio.loop,\n    muted: audio.muted,\n    paused: audio.paused,\n    playbackRate: audio.playbackRate,\n    readyState: audio.readyState,\n    seeking: audio.seeking,\n    volume: audio.volume,\n  };\n};\n\nexport const stringUtils = {\n  toKebab: (str: string) => str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\").toLowerCase(),\n  toPascal: (str: string) => str.replace(/(\\w)(\\w*)/g, (_, g1, g2) => g1.toUpperCase() + g2.toLowerCase()),\n  toCamel: (str: string) => str.replace(/(\\w)(\\w*)/g, (_, g1, g2) => g1.toLowerCase() + g2.toLowerCase()),\n  toSnake: (str: string) => str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1_$2\").toLowerCase(),\n  toTitle: (str: string) => str.replace(/(\\w)(\\w*)/g, (_, g1, g2) => g1.toUpperCase() + g2.toLowerCase()),\n  toSentence: (str: string) => str.replace(/(\\w)(\\w*)/g, (_, g1, g2) => g1.toUpperCase() + g2.toLowerCase()),\n  toCapital: (str: string) => str.charAt(0).toUpperCase() + str.slice(1),\n  toLower: (str: string) => str.toLowerCase(),\n  toUpper: (str: string) => str.toUpperCase(),\n  toTrim: (str: string) => str.trim(),\n  toReverse: (str: string) => str.split(\"\").reverse().join(\"\"),\n  toReplace: (str: string, search: string, replace: string) => str.replace(new RegExp(search, \"g\"), replace),\n  toSlice: (str: string, start: number, end: number) => str.slice(start, end),\n  toSubstring: (str: string, start: number, end: number) => str.substring(start, end),\n  toCharAt: (str: string, index: number) => str.charAt(index),\n  toCharCodeAt: (str: string, index: number) => str.charCodeAt(index),\n  toCodePointAt: (str: string, index: number) => str.codePointAt(index),\n  toConcat: (str: string, ...args: string[]) => str.concat(...args),\n  toIncludes: (str: string, search: string) => str.includes(search),\n  toEndsWith: (str: string, search: string) => str.endsWith(search),\n  toStartsWith: (str: string, search: string) => str.startsWith(search),\n  toIndexOf: (str: string, search: string) => str.indexOf(search),\n  toLastIndexOf: (str: string, search: string) => str.lastIndexOf(search),\n  toMatch: (str: string, search: string) => str.match(new RegExp(search, \"g\")),\n  toSearch: (str: string, search: string) => str.search(new RegExp(search, \"g\")),\n};\n\nexport const audioUtils = {\n  play: (audio: HTMLAudioElement) => audio.play(),\n  pause: (audio: HTMLAudioElement) => audio.pause(),\n  seek: (audio: HTMLAudioElement, time: number) => {\n    audio.currentTime = time;\n  }\n};\n\n","import { Sonority } from \"./components/Sonority\";\nimport { Track } from \"./components/Track\";\nimport { Playlist } from \"./components/Playlist\";\nimport { Control } from \"./components/Control\";\nimport { Current } from \"./components/Current\";\nimport { Visualizer } from \"./components/Visualizer\";\nimport { useSonority, usePlaybackControls, usePlaybackState, usePlaylistState, useSonoritySelector, useTrackInfo, useVolumeState } from \"./context/SonorityContext\";\nimport { mergePlaylists, createPlaylist, filterPlaylist, sortPlaylist, shufflePlaylist, toggleAutoplay, toggleControls, toggleLoop, toggleMute, togglePlaybackRate, stringUtils, audioUtils } from \"./utils\";\n\nexport { Sonority, Track, Playlist, Control, Current, Visualizer, useSonority, usePlaybackControls, usePlaybackState, usePlaylistState, useSonoritySelector, useTrackInfo, useVolumeState, mergePlaylists, createPlaylist, filterPlaylist, sortPlaylist, shufflePlaylist, toggleAutoplay, toggleControls, toggleLoop, toggleMute, togglePlaybackRate, stringUtils, audioUtils };\nexport default Sonority;\n"]}