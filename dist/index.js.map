{"version":3,"sources":["../src/context/SonorityContext.tsx","../src/utils/audioManager.ts","../src/components/Current.tsx","../src/components/Control.tsx","../src/components/Playlist.tsx","../src/components/Track.tsx","../src/components/Visualizer.tsx","../src/components/Sonority.tsx","../src/index.ts"],"names":["_a","createContext","useContext","jsx","React","useEffect","jsxs","Track","useRef"],"mappings":"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","sourcesContent":["// src/context/SonorityContext.tsx\nimport React, { createContext, useContext, useReducer, useRef, useEffect } from \"react\";\nimport type { TrackProps, PlaylistProps } from \"../types\";\nimport { audioManager } from \"../utils/audioManager\";\n\ninterface SonorityState {\n  currentTrack: TrackProps | null;\n  currentPlaylist: PlaylistProps | null;\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  volume: number;\n  previousVolume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  isShuffled: boolean;\n  isRepeating: boolean;\n  isRepeatingOne: boolean;\n  queue: TrackProps[];\n}\n\ninterface AudioControls {\n  seek: (time: number) => void;\n  setVolume: (volume: number) => void;\n  setPlaybackRate: (rate: number) => void;\n}\n\ninterface SonorityContextType {\n  state: SonorityState;\n  dispatch: React.Dispatch<SonorityAction>;\n  audioControls: AudioControls; // Add this line\n}\n\nconst initialState: SonorityState = {\n  currentTrack: null,\n  currentPlaylist: null,\n  isPlaying: false,\n  currentTime: 0,\n  duration: 0,\n  volume: 1,\n  previousVolume: 1,\n  isMuted: false,\n  isShuffled: false,\n  isRepeating: false,\n  isRepeatingOne: false,\n  playbackRate: 1,\n  queue: [],\n};\n\nexport const SonorityContext = createContext<SonorityContextType | null>(null);\n\ntype SonorityAction = { type: \"SET_TRACK\"; payload: TrackProps } | { type: \"SET_PLAYLIST\"; payload: PlaylistProps } | { type: \"PLAY\" } | { type: \"PAUSE\" } | { type: \"SET_VOLUME\"; payload: number } | { type: \"SET_TIME\"; payload: number } | { type: \"SET_DURATION\"; payload: number } | { type: \"TOGGLE_SHUFFLE\" } | { type: \"TOGGLE_REPEAT\" } | { type: \"TOGGLE_REPEAT_ONE\" } | { type: \"NEXT_TRACK\" } | { type: \"PREVIOUS_TRACK\" } | { type: \"SET_QUEUE\"; payload: TrackProps[] } | { type: \"TOGGLE_MUTE\" } | { type: \"SET_MUTED\"; payload: boolean } | { type: \"SET_PLAYBACK_RATE\"; payload: number };\n\nconst sonorityReducer = (state: SonorityState, action: SonorityAction): SonorityState => {\n  switch (action.type) {\n    case \"SET_TRACK\": {\n      return {\n        ...state,\n        currentTrack: action.payload,\n        currentTime: 0,\n        // Don't change isPlaying state here\n      };\n    }\n    case \"TOGGLE_SHUFFLE\":\n      return {\n        ...state,\n        isShuffled: !state.isShuffled,\n        queue: state.isShuffled\n          ? [...state.queue].sort(() => Math.random() - 0.5) // Shuffle when turned on\n          : state.currentPlaylist?.tracks || state.queue, // Restore original order\n      };\n\n    case \"TOGGLE_REPEAT\":\n      return {\n        ...state,\n        isRepeating: !state.isRepeating,\n        isRepeatingOne: false, // Disable repeat one when toggling repeat\n      };\n\n    case \"TOGGLE_REPEAT_ONE\":\n      return {\n        ...state,\n        isRepeatingOne: !state.isRepeatingOne,\n        isRepeating: false, // Disable repeat all when toggling repeat one\n      };\n    case \"SET_PLAYLIST\":\n      return {\n        ...state,\n        currentPlaylist: action.payload,\n        queue: action.payload.tracks || [], // Update queue when playlist changes\n      };\n    case \"PLAY\":\n      return { ...state, isPlaying: true };\n    case \"PAUSE\":\n      return { ...state, isPlaying: false };\n    case \"SET_VOLUME\":\n      return { ...state, volume: action.payload };\n    case \"SET_TIME\":\n      return { ...state, currentTime: action.payload };\n    case \"SET_DURATION\":\n      return { ...state, duration: action.payload };\n    case \"SET_QUEUE\":\n      return { ...state, queue: action.payload };\n    case \"NEXT_TRACK\": {\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const nextIndex = currentIndex + 1 >= state.queue.length ? 0 : currentIndex + 1;\n      return {\n        ...state,\n        currentTrack: state.queue[nextIndex] || state.currentTrack,\n        currentTime: 0,\n        isPlaying: state.isPlaying, // Maintain play state when changing tracks\n      };\n    }\n    case \"PREVIOUS_TRACK\": {\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const prevIndex = currentIndex <= 0 ? state.queue.length - 1 : currentIndex - 1;\n      return {\n        ...state,\n        currentTrack: state.queue[prevIndex] || state.currentTrack,\n        currentTime: 0,\n        isPlaying: state.isPlaying, // Maintain play state when changing tracks\n      };\n    }\n    case \"TOGGLE_MUTE\":\n      if (state.isMuted) {\n        // Unmuting - restore previous volume\n        return {\n          ...state,\n          isMuted: false,\n          volume: state.previousVolume,\n        };\n      } else {\n        return {\n          ...state,\n          isMuted: true,\n          previousVolume: state.volume,\n          volume: 0,\n        };\n      }\n    case \"SET_MUTED\":\n      return {\n        ...state,\n        isMuted: action.payload,\n        volume: action.payload ? 0 : state.previousVolume,\n      };\n    case \"SET_PLAYBACK_RATE\":\n      return {\n        ...state,\n        playbackRate: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SonorityProvider: React.FC<{ children: React.ReactNode; id: any }> = ({ children, id = crypto.randomUUID() }) => {\n  const [state, dispatch] = useReducer(sonorityReducer, initialState);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const playerIdRef = useRef(id);\n\n  useEffect(() => {\n    // Register this player with the audio manager\n    audioManager.registerPlayer(playerIdRef.current, () => {\n      dispatch({ type: \"PAUSE\" });\n    });\n\n    return () => {\n      audioManager.unregisterPlayer(playerIdRef.current);\n    };\n  }, []);\n  // Create audio element on mount\n  useEffect(() => {\n    audioRef.current = new Audio();\n    audioRef.current.preload = \"auto\";\n    // Enable CORS\n    audioRef.current.crossOrigin = \"anonymous\";\n\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current.src = \"\";\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    if (state.isPlaying) {\n      audioManager.notifyPlayStarted(playerIdRef.current);\n      audioRef.current.play().catch((error) => {\n        console.warn(\"Playback error:\", error);\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle track changes\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    const audio = audioRef.current;\n\n    // Setup new track\n    const setupNewTrack = () => {\n      audio.src = state.currentTrack?.src || \"\";\n      audio.load();\n      // Only auto-play if user has already started playback\n      if (state.isPlaying) {\n        audio.play().catch((error) => {\n          console.log(\"Playback prevented:\", error);\n          dispatch({ type: \"PAUSE\" });\n        });\n      }\n    };\n\n    // Event listeners\n    const handleLoadedMetadata = () => {\n      dispatch({ type: \"SET_DURATION\", payload: audio.duration });\n    };\n\n    const handleTimeUpdate = () => {\n      dispatch({ type: \"SET_TIME\", payload: audio.currentTime });\n    };\n\n    const handleEnded = () => {\n      if (state.isRepeatingOne) {\n        audio.currentTime = 0;\n        audio.play().catch(console.warn);\n      } else if (state.isRepeating) {\n        // If repeat all is on, go to next track or first track\n        const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n        const nextIndex = (currentIndex + 1) % state.queue.length;\n        dispatch({\n          type: \"SET_TRACK\",\n          payload: state.queue[nextIndex],\n        });\n      } else if (state.queue.length > 0) {\n        // Normal playlist progression\n        dispatch({ type: \"NEXT_TRACK\" });\n      } else {\n        dispatch({ type: \"PAUSE\" });\n      }\n    };\n\n    const handleError = (e: ErrorEvent) => {\n      console.warn(\"Audio error:\", e);\n      // Try to recover by reloading\n      audio.load();\n    };\n\n    // Add listeners\n    audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\n    audio.addEventListener(\"ended\", handleEnded);\n    audio.addEventListener(\"error\", handleError);\n\n    // Setup track\n    setupNewTrack();\n\n    return () => {\n      audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      audio.removeEventListener(\"ended\", handleEnded);\n      audio.removeEventListener(\"error\", handleError);\n    };\n  }, [state.currentTrack?.id]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    if (state.isPlaying) {\n      audioRef.current.play().catch((error) => {\n        if (error.name === \"NotAllowedError\") {\n          console.log(\"Playback prevented. Waiting for user interaction.\");\n        } else {\n          console.warn(\"Playback error:\", error);\n        }\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle volume\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = state.volume;\n    }\n  }, [state.volume]);\n\n  const audioControls = {\n    seek: (time: number) => {\n      if (audioRef.current) {\n        audioRef.current.currentTime = time;\n      }\n    },\n    setVolume: (volume: number) => {\n      if (audioRef.current) {\n        audioRef.current.volume = volume;\n      }\n    },\n    setPlaybackRate: (rate: number) => {\n      if (audioRef.current) {\n        audioRef.current.playbackRate = rate;\n      }\n    },\n  };\n\n  const value = {\n    state,\n    dispatch,\n    audioControls,\n  };\n\n  return (\n    <SonorityContext.Provider value={value}>\n      {children}\n      {state.currentTrack && (\n        <audio\n          ref={audioRef}\n          src={state.currentTrack.src}\n          preload=\"metadata\"\n        />\n      )}\n    </SonorityContext.Provider>\n  );\n};\n\nexport const useSonority = () => {\n  const context = useContext(SonorityContext);\n  if (!context) {\n    throw new Error(\"useSonority must be used within a SonorityProvider\");\n  }\n  return context;\n};\n","// src/utils/audioManager.ts\ntype PlayerCallback = () => void;\n\nclass AudioManager {\n  private static instance: AudioManager;\n  private currentPlayerId: string | null = null;\n  private callbacks: Map<string, PlayerCallback> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): AudioManager {\n    if (!AudioManager.instance) {\n      AudioManager.instance = new AudioManager();\n    }\n    return AudioManager.instance;\n  }\n\n  registerPlayer(playerId: string, pauseCallback: PlayerCallback) {\n    this.callbacks.set(playerId, pauseCallback);\n  }\n\n  unregisterPlayer(playerId: string) {\n    this.callbacks.delete(playerId);\n  }\n\n  notifyPlayStarted(playerId: string) {\n    if (this.currentPlayerId && this.currentPlayerId !== playerId) {\n      // Pause the previously playing player\n      const pauseCallback = this.callbacks.get(this.currentPlayerId);\n      if (pauseCallback) {\n        pauseCallback();\n      }\n    }\n    this.currentPlayerId = playerId;\n  }\n}\n\nexport const audioManager = AudioManager.getInstance();","// src/components/Current.tsx\nimport React, { createContext, useContext } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport type { TrackProps } from \"../types\";\n\nexport interface CurrentContextType {\n  currentTrack: TrackProps | null;\n}\n\nconst CurrentContext = createContext<CurrentContextType | null>(null);\n\n// Default context provider that allows subcomponents to be used independently\nconst CurrentContextProvider: React.FC<{\n  children: React.ReactNode;\n  className?: string;\n}> = ({ children, className }) => {\n  const { state } = useSonority();\n\n  const contextValue: CurrentContextType = {\n    currentTrack: state.currentTrack,\n  };\n\n  return (\n    <CurrentContext.Provider value={contextValue}>\n      <div className={className}>{children}</div>\n    </CurrentContext.Provider>\n  );\n};\n\nexport const Current:\n  | React.FC<{\n      children?: React.ReactNode | any;\n      className?: string | any;\n    }>\n  | (any & {\n      Cover: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Track: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Artist: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Album: React.FC<{ className?: string; children?: React.ReactNode }>;\n      WrittenBy: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Copyright: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Genre: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Year: React.FC<{ className?: string; children?: React.ReactNode }>;\n    }) = Object.assign(({ children, className }: { children?: React.ReactNode; className?: string }) => <CurrentContextProvider className={className}>{children || <Current.Track />}</CurrentContextProvider>, {\n  Provider: CurrentContextProvider,\n});\n\n// Utility hook to access current track context\nconst useCurrentContext = () => {\n  const context = useContext(CurrentContext);\n  if (!context) {\n    // If no context is available, use the global Sonority state\n    const { state } = useSonority();\n    return { currentTrack: state.currentTrack };\n  }\n  return context;\n};\n\n// Subcomponent definitions\nconst createSubcomponent = (propName: keyof TrackProps, defaultRenderer?: (track: TrackProps) => React.ReactNode) => {\n  return ({ className, children }: { className?: string; children?: React.ReactNode }) => {\n    const { currentTrack } = useCurrentContext();\n\n    // If children are explicitly provided, use them\n    if (children) return <div className={className}>{children}</div>;\n\n    // Use default renderer if provided\n    if (defaultRenderer && currentTrack) {\n      const renderedContent = defaultRenderer(currentTrack);\n      return renderedContent ? <div className={className}>{renderedContent}</div> : null;\n    }\n\n    // Default rendering based on prop\n    return currentTrack && currentTrack[propName] ? <div className={className}>{currentTrack[propName] as any}</div> : null;\n  };\n};\n\n// Attach subcomponents\nCurrent.Cover = createSubcomponent(\"image\", (track) =>\n  track.image ? (\n    <img\n      src={track.image.src}\n      alt={track.image.alt || \"Album Cover\"}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n      }}\n    />\n  ) : null\n);\n\nCurrent.Track = createSubcomponent(\"title\");\nCurrent.Artist = createSubcomponent(\"artist\");\nCurrent.Album = createSubcomponent(\"album\");\nCurrent.WrittenBy = createSubcomponent(\"writtenBy\");\nCurrent.Copyright = createSubcomponent(\"copyright\");\n// Current.Genre = createSubcomponent('genre');\n// Current.Year = createSubcomponent('year');\n\nexport default Current;\n","// src/components/Control.tsx\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport * as Slider from \"@radix-ui/react-slider\";\nimport * as Select from \"@radix-ui/react-select\";\n\nexport interface ControlContextType {\n  state: any;\n  dispatch: any;\n  audioControls: any;\n}\n\ninterface SpeedRenderProps {\n  speeds: number[];\n  currentSpeed: number;\n  setSpeed: (speed: number) => void;\n}\n\ninterface ControlSpeedProps {\n  className?: string;\n  children?: React.ReactNode | ((props: SpeedRenderProps) => React.ReactNode);\n  options?: SpeedControlOptions;\n}\n\ninterface SpeedControlOptions {\n  min?: number;\n  max?: number;\n  default?: number;\n  steps?: number;\n  variant?: \"range\" | \"select\" | \"buttons\";\n}\n\nconst ControlContext = createContext<ControlContextType | null>(null);\n\n// Default context provider that allows subcomponents to be used independently\nconst ControlContextProvider: React.FC<{\n  children: React.ReactNode;\n  className?: string;\n}> = ({ children, className }) => {\n  const { state, dispatch, audioControls } = useSonority();\n\n  const contextValue: ControlContextType = {\n    state,\n    dispatch,\n    audioControls,\n  };\n\n  return (\n    <ControlContext.Provider value={contextValue}>\n      <div\n        data-sonority-component=\"control\"\n        className={className}>\n        {children}\n      </div>\n    </ControlContext.Provider>\n  );\n};\n\nexport const Control:\n  | any\n  | (React.FC<{\n      children?: React.ReactNode;\n      className?: string;\n    }> & {\n      Play: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Pause: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Previous: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Next: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Seek: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Volume: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Shuffle: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Repeat: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Mute: React.FC<{ className?: string; children?: React.ReactNode }>;\n      Speed: React.FC<{\n        className?: string;\n        children?: React.ReactNode;\n        options?: SpeedControlOptions;\n      }>;\n    }) = Object.assign(({ children, className }: { children?: React.ReactNode; className?: string }) => <ControlContextProvider className={className}>{children}</ControlContextProvider>, {\n  Provider: ControlContextProvider,\n});\n\n// Utility hook to access control context\nconst useControlContext = () => {\n  const context = useContext(ControlContext);\n  if (!context) {\n    // If no context is available, use the global Sonority state\n    const { state, dispatch, audioControls } = useSonority();\n    return { state, dispatch, audioControls };\n  }\n  return context;\n};\n\n// Subcomponent for Play/Pause\n\ninterface PlayProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nControl.Play = ({ className, children }: PlayProps) => {\n  const { state, dispatch } = useControlContext();\n\n  const handlePlayPause = () => {\n    if (!state.currentTrack && state.queue.length > 0) {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: state.queue[0],\n      });\n    }\n    dispatch({ type: state.isPlaying ? \"PAUSE\" : \"PLAY\" });\n  };\n\n  return (\n    <button\n      onClick={handlePlayPause}\n      className={className}>\n      {children || (state.isPlaying ? \"Pause\" : \"Play\")}\n    </button>\n  );\n};\n\ninterface PreviousProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Previous Track\nControl.Previous = ({ className, children }: PreviousProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      onClick={() => dispatch({ type: \"PREVIOUS_TRACK\" })}\n      className={className}\n      disabled={state.queue.length <= 1}>\n      {children || \"Previous\"}\n    </button>\n  );\n};\n\ninterface NextProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Next Track\nControl.Next = ({ className, children }: NextProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      onClick={() => dispatch({ type: \"NEXT_TRACK\" })}\n      className={className}\n      data-sonority-next={state.queue.length <= 1}\n      disabled={state.queue.length <= 1}>\n      {children || \"Next\"}\n    </button>\n  );\n};\n\ninterface SeekProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Seek\nControl.Seek = ({ className, children }: SeekProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n\n  return (\n    <Slider.Root\n      style={{\n        width: \"100%\",\n        height: \"10px\",\n        position: \"relative\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        touchAction: \"none\",\n        userSelect: \"none\",\n      }}\n      value={[state.currentTime]}\n      onValueChange={(value) => {\n        if (audioControls?.seek && value.length > 0) {\n          audioControls.seek(value[0]);\n          dispatch({ type: \"SET_TIME\", payload: value[0] });\n        }\n      }}\n      max={state.duration || 0}\n      step={0.1}>\n      <Slider.Track\n        style={{\n          position: \"relative\",\n          flexGrow: 1,\n          height: \"4px\",\n          backgroundColor: \"currentColor\",\n          borderRadius: \"9999px\",\n        }}>\n        <Slider.Range\n          style={{\n            position: \"absolute\",\n            height: \"100%\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n            left: 0,\n            right: 0,\n          }}\n        />\n      </Slider.Track>\n      <Slider.Thumb\n        style={{\n          width: \"16px\",\n          height: \"16px\",\n          minHeight: \"16px\",\n          minWidth: \"16px\",\n          backgroundColor: \"rgba(0,0,0,0.5)\",\n          border: \"2px solid currentColor\",\n          outline: \"none\",\n          boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n          transition: \"background-color 0.2s\",\n        }}\n        aria-label=\"Seek\"\n      />\n    </Slider.Root>\n  );\n};\n\ninterface VolumeProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface MuteProps {\n  className?: string;\n  children?: React.ReactNode;\n  initialMuted?: boolean;\n}\n\nControl.Mute = ({ className, children, initialMuted = false }: MuteProps) => {\n  const { state, dispatch } = useControlContext();\n\n  // Set initial mute state\n  useEffect(() => {\n    if (initialMuted) {\n      dispatch({ type: \"SET_MUTED\", payload: true });\n    }\n  }, []);\n\n  const handleMute = () => {\n    dispatch({ type: \"TOGGLE_MUTE\" });\n  };\n\n  return (\n    <button\n      onClick={handleMute}\n      className={className}\n      aria-label={state.isMuted ? \"Unmute\" : \"Mute\"}\n      title={state.isMuted ? \"Unmute\" : \"Mute\"}>\n      {children || (state.isMuted ? \"Unmute\" : \"Mute\")}\n    </button>\n  );\n};\n\ninterface ControlSpeedProps {\n  className?: string;\n  children?: React.ReactNode | ((props: SpeedRenderProps) => React.ReactNode);\n  options?: SpeedControlOptions;\n}\n\nControl.Speed = ({ className, options = {}, children }: ControlSpeedProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n  const { min = 0, max = 2, default: defaultValue = 1, steps: steps = 0.5, variant = \"range\" } = options;\n\n  const speeds = React.useMemo(() => {\n    const count = (max - min) / steps + 1;\n    return Array.from({ length: count }, (_, i) => min + i * steps);\n  }, [min, max, steps]);\n\n  const handleSpeedChange = (speed: number) => {\n    dispatch({ type: \"SET_PLAYBACK_RATE\", payload: speed });\n    if (audioControls?.setPlaybackRate) {\n      audioControls.setPlaybackRate(speed);\n    }\n  };\n\n  if (variant === \"buttons\" && typeof children === \"function\") {\n    return (children as (props: SpeedRenderProps) => React.ReactNode)({\n      speeds,\n      currentSpeed: state.playbackRate ?? defaultValue,\n      setSpeed: handleSpeedChange,\n    });\n  }\n\n  if (variant === \"range\") {\n    return (\n      <Slider.Root\n        style={{\n          width: \"100%\",\n          height: \"10px\",\n          position: \"relative\",\n          cursor: \"pointer\",\n          display: \"flex\",\n          alignItems: \"center\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n        }}\n        value={[state.playbackRate ?? defaultValue]}\n        min={min}\n        max={max}\n        step={steps}\n        onValueChange={([value]) => handleSpeedChange(value)}\n        className={className}>\n        <Slider.Track\n          style={{\n            position: \"relative\",\n            flexGrow: 1,\n            height: \"4px\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n          }}>\n          <Slider.Range\n            style={{\n              position: \"absolute\",\n              height: \"100%\",\n              backgroundColor: \"currentColor\",\n              borderRadius: \"9999px\",\n            }}\n          />\n        </Slider.Track>\n        <Slider.Thumb\n          style={{\n            width: \"16px\",\n            height: \"16px\",\n            minHeight: \"16px\",\n            minWidth: \"16px\",\n            backgroundColor: \"currentColor\",\n            border: \"2px solid white\",\n            outline: \"none\",\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n            transition: \"background-color 0.2s\",\n          }}\n          aria-label=\"Speed\"\n        />\n      </Slider.Root>\n    );\n  }\n\n  if (variant === \"select\") {\n    return (\n      <select\n        className={className}\n        value={state.playbackRate ?? defaultValue}\n        onChange={(e) => handleSpeedChange(Number(e.target.value))}>\n        {speeds.map((speed) => (\n          <option\n            key={speed}\n            value={speed}>\n            {speed}x\n          </option>\n        ))}\n      </select>\n    );\n  }\n\n  if (variant === \"buttons\") {\n    if (typeof children === \"function\") {\n      return children({\n        speeds,\n        currentSpeed: state.playbackRate ?? defaultValue,\n        setSpeed: handleSpeedChange,\n      });\n    }\n\n    return (\n      <div className={`flex gap-2 ${className}`}>\n        {speeds.map((speed) => (\n          <button\n            key={speed}\n            onClick={() => handleSpeedChange(speed)}\n            className={`px-2 py-1 rounded ${(state.playbackRate ?? defaultValue) === speed ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}>\n            {speed}x\n          </button>\n        ))}\n      </div>\n    );\n  }\n\n  return null;\n};\n\ninterface ControlVolumeProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Volume\nControl.Volume = ({ className }: VolumeProps) => {\n  const { state, dispatch, audioControls } = useControlContext();\n\n  return (\n    <Slider.Root\n      className={className}\n      style={{\n        width: \"100%\",\n        height: \"10px\",\n        position: \"relative\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        touchAction: \"none\",\n        userSelect: \"none\",\n      }}\n      value={[state.volume]}\n      max={1}\n      step={0.01}\n      onValueChange={(value) => {\n        if (value.length > 0) {\n          dispatch({ type: \"SET_VOLUME\", payload: value[0] });\n          audioControls.setVolume(value[0]);\n        }\n      }}>\n      <Slider.Track\n        style={{\n          position: \"relative\",\n          flexGrow: 1,\n          height: \"4px\",\n          backgroundColor: \"currentColor\",\n          borderRadius: \"9999px\",\n        }}>\n        <Slider.Range\n          style={{\n            position: \"absolute\",\n            height: \"100%\",\n            backgroundColor: \"currentColor\",\n            borderRadius: \"9999px\",\n            left: 0,\n            right: 0,\n          }}\n        />\n      </Slider.Track>\n      <Slider.Thumb\n        style={{\n          width: \"16px\",\n          height: \"16px\",\n          minHeight: \"16px\",\n          minWidth: \"16px\",\n          backgroundColor: \"currentColor\",\n          border: \"2px solid white\",\n          outline: \"none\",\n          boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n          transition: \"background-color 0.2s\",\n        }}\n        aria-label=\"Volume\"\n      />\n    </Slider.Root>\n  );\n};\n\ninterface ShuffleProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface ControlRepeatProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n// Subcomponent for Shuffle\nControl.Shuffle = ({ className, children }: ShuffleProps) => {\n  const { state, dispatch } = useControlContext();\n\n  return (\n    <button\n      onClick={() => dispatch({ type: \"TOGGLE_SHUFFLE\" })}\n      className={className}>\n      {children || \"Shuffle\"}\n    </button>\n  );\n};\n\ninterface RepeatProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Subcomponent for Repeat\nControl.Repeat = ({ className, children }: RepeatProps) => {\n  const { state, dispatch } = useControlContext();\n\n  const handleRepeat = () => {\n    // Cycle through repeat modes\n    if (!state.isRepeating && !state.isRepeatingOne) {\n      dispatch({ type: \"TOGGLE_REPEAT\" });\n    } else if (state.isRepeating) {\n      dispatch({ type: \"TOGGLE_REPEAT\" });\n      dispatch({ type: \"TOGGLE_REPEAT_ONE\" });\n    } else if (state.isRepeatingOne) {\n      dispatch({ type: \"TOGGLE_REPEAT_ONE\" });\n    }\n  };\n\n  return (\n    <button\n      onClick={handleRepeat}\n      className={className}>\n      {children || \"Repeat\"}\n    </button>\n  );\n};\n\nexport default Control;\n","import React, { useEffect } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport { Track, TrackProps } from \"./Track\";\n\nexport interface PlaylistProps {\n  name: string;\n  id: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\n// src/components/Playlist.tsx\nexport const Playlist: React.FC<PlaylistProps> = ({\n  name,\n  id,\n  children,\n  className,\n}) => {\n  const { dispatch, state } = useSonority();\n\n  // Single initialization effect\n  useEffect(() => {\n    const trackElements = React.Children.toArray(children).filter(\n      (child) => React.isValidElement(child) && child.type === Track\n    );\n\n    const extractedTracks = trackElements.map((track: any) => ({\n      ...track.props,\n      id: track.props.id || crypto.randomUUID(),\n    }));\n\n    // Initialize playlist\n    dispatch({\n      type: \"SET_PLAYLIST\",\n      payload: {\n        id,\n        name,\n        tracks: extractedTracks,\n      },\n    });\n\n    // Select first track by default if no track is currently selected\n    if (!state.currentTrack && extractedTracks.length > 0) {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: extractedTracks[0],\n      });\n    }\n  }, [id, name]); \n\n  const handleTrackSelect = (trackProps: TrackProps) => {\n    dispatch({\n      type: \"SET_TRACK\",\n      payload: trackProps,\n    });\n  };\n\n  return (\n    <div\n      data-sonority-component=\"playlist\"\n      data-sonority-playlist-id={id}\n      data-sonority-playlist-name={name}\n      className={className}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Track) {\n          return React.cloneElement(child, {\n            ...child.props,\n            onClick: () => handleTrackSelect(child.props),\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};","import React, { createContext, useContext } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\n\nexport interface TrackProps {\n  className?: string;\n  title: string;\n  artist?: string;\n  writtenBy?: string;\n  album?: string;\n  image?: { src: string; alt?: string };\n  src: string;\n  id: string;\n  onClick?: () => void;\n  children?: React.ReactNode;\n  coverWidth?: number;\n  coverClassName?: string;\n  genre?: string;\n  year?: number;\n  duration?: number;\n  [key: string]: any; // Allow additional custom properties\n}\n\n// Create a context to share track information\nconst TrackContext = createContext<TrackProps | null>(null);\n\nexport const Track: React.FC<TrackProps> & {\n  Title: React.FC<{ className?: string; children?: React.ReactNode }>;\n  Artist: React.FC<{ className?: string; children?: React.ReactNode }>;\n  WrittenBy: React.FC<{ className?: string; children?: React.ReactNode }>;\n  Album: React.FC<{ className?: string; children?: React.ReactNode }>;\n  Cover: React.FC<{\n    className?: string;\n    imgClassName?: string;\n    altClassName?: string;\n  }>;\n  Genre: React.FC<{ className?: string; children?: React.ReactNode }>;\n  Year: React.FC<{ className?: string; children?: React.ReactNode }>;\n  Duration: React.FC<{ className?: string; children?: React.ReactNode }>;\n  CustomProperty: React.FC<{\n    name: string;\n    className?: string;\n    children?: React.ReactNode;\n  }>;\n} = ({ className, title, artist, writtenBy, album, image, src, id, onClick, children, coverWidth = 32, coverClassName = \"\", genre, year, duration, ...props }) => {\n  const { dispatch, state } = useSonority();\n  const isCurrentTrack = state.currentTrack?.id === id;\n\n  const handleTrackClick = () => {\n    dispatch({\n      type: \"SET_TRACK\",\n      payload: {\n        id,\n        title,\n        artist,\n        writtenBy,\n        album,\n        image,\n        src,\n        genre,\n        year,\n        duration,\n        ...props,\n      },\n    });\n    onClick?.();\n  };\n\n  // If children are explicitly provided, use them\n  if (React.Children.count(children) > 0) {\n    return (\n      <TrackContext.Provider\n        value={{\n          title,\n          artist,\n          writtenBy,\n          album,\n          image,\n          src,\n          id,\n          genre,\n          year,\n          duration,\n          ...props,\n        }}>\n        <button\n          data-sonority-component=\"track\"\n          data-sonority-current={isCurrentTrack}\n          className={className}\n          onClick={handleTrackClick}>\n          {children}\n        </button>\n      </TrackContext.Provider>\n    );\n  }\n\n  // Default rendering if no children\n  return (\n    <TrackContext.Provider\n      value={{\n        title,\n        artist,\n        writtenBy,\n        album,\n        image,\n        src,\n        id,\n        genre,\n        year,\n        duration,\n        ...props,\n      }}>\n      <button\n        data-sonority-component=\"track\"\n        data-sonority-current={isCurrentTrack}\n        className={className}\n        onClick={handleTrackClick}>\n        <Track.Cover />\n        <div>\n          <Track.Title />\n          <Track.Artist />\n          {writtenBy && <Track.WrittenBy />}\n          {album && <Track.Album />}\n        </div>\n      </button>\n    </TrackContext.Provider>\n  );\n};\n\n// Hook to access track context\nconst useTrackContext = () => {\n  const context = useContext(TrackContext);\n  if (!context) {\n    throw new Error(\"Track components must be rendered inside a Track component\");\n  }\n  return context;\n};\n\n// Helper function to format duration\nconst formatDuration = (duration?: number) => {\n  if (!duration) return \"\";\n  const minutes = Math.floor(duration / 60);\n  const seconds = Math.floor(duration % 60);\n  return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n};\n\n// Title Subcomponent\nTrack.Title = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default title rendering\n  return (\n    <p\n      className={className}\n      style={{ textAlign: \"start\" }}>\n      {track.title}\n    </p>\n  );\n};\n\n// Artist Subcomponent\nTrack.Artist = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default artist rendering (only if artist exists)\n  return track.artist ? <p className={className}>{track.artist}</p> : null;\n};\n\n// WrittenBy Subcomponent\nTrack.WrittenBy = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default writtenBy rendering (only if writtenBy exists)\n  return track.writtenBy ? <p className={className}>Written by: {track.writtenBy}</p> : null;\n};\n\n// Album Subcomponent\nTrack.Album = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default album rendering (only if album exists)\n  return track.album ? <p className={className}>Album: {track.album}</p> : null;\n};\n\n// Genre Subcomponent\nTrack.Genre = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default genre rendering (only if genre exists)\n  return track.genre ? <p className={className}>Genre: {track.genre}</p> : null;\n};\n\n// Year Subcomponent\nTrack.Year = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default year rendering (only if year exists)\n  return track.year ? <p className={className}>Year: {track.year}</p> : null;\n};\n\n// Duration Subcomponent\nTrack.Duration = ({ className, children }) => {\n  const track = useTrackContext();\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Default duration rendering (only if duration exists)\n  return track.duration ? <p className={className}>Duration: {formatDuration(track.duration)}</p> : null;\n};\n\n// Cover Subcomponent\nTrack.Cover = ({ className, imgClassName, altClassName }) => {\n  const track = useTrackContext();\n\n  // Only render if image exists\n  return track.image ? (\n    <figure className={className}>\n      <img\n        src={track.image.src}\n        alt={track.image.alt || track.title}\n        className={imgClassName}\n        style={{\n          minWidth: \"100%\",\n          minHeight: \"100%\",\n          width: \"100%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n        }}\n      />\n      {track.image.alt && (\n        <figcaption\n          hidden\n          className={altClassName}>\n          {track.image.alt}\n        </figcaption>\n      )}\n    </figure>\n  ) : null;\n};\n\n// Custom Property Subcomponent\nTrack.CustomProperty = ({ name, className, children }) => {\n  const track = useTrackContext();\n\n  // Check if the custom property exists\n  const propertyValue = track[name];\n\n  // If children are explicitly provided, use them\n  if (children) return <p className={className}>{children}</p>;\n\n  // Render custom property if it exists\n  return propertyValue ? (\n    <p className={className}>\n      {name}: {propertyValue.toString()}\n    </p>\n  ) : null;\n};\n\nexport default Track;\n","import React, { useRef, useEffect, useState } from \"react\";\n\ninterface VisualizerProps {\n  className?: string;\n  is?: \"waves\" | \"lines\" | \"bars\" | \"circle\" | \"equalizer\" | \"none\" | undefined;\n  width?: number;\n  height?: number;\n  color?: string;\n}\n\nexport const Visualizer = ({ is = \"bars\", className = \"\", width = 300, height = 150, color = \"#4ade80\" }: VisualizerProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [analyser, setAnalyser] = useState<AnalyserNode | null>(null);\n  const [dataArray, setDataArray] = useState<Uint8Array | null>(null);\n  const animationFrameRef = useRef<number>();\n\n  useEffect(() => {\n    // Create audio context and analyzer\n    const initAudio = async () => {\n      const audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const analyzerNode = audioCtx.createAnalyser();\n      analyzerNode.fftSize = 256;\n\n      try {\n        // Get audio element (assuming it exists in the DOM with data-sonority-audio)\n        const audioElement = document.querySelector(\"[data-sonority-audio]\") as HTMLAudioElement;\n        if (audioElement) {\n          const source = audioCtx.createMediaElementSource(audioElement);\n          source.connect(analyzerNode);\n          analyzerNode.connect(audioCtx.destination);\n        }\n      } catch (error) {\n        console.error(\"Error connecting to audio source:\", error);\n      }\n\n      setAudioContext(audioCtx);\n      setAnalyser(analyzerNode);\n      setDataArray(new Uint8Array(analyzerNode.frequencyBinCount));\n    };\n\n    initAudio();\n\n    return () => {\n      if (audioContext) {\n        audioContext.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  const drawBars = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    const barWidth = width / data.length;\n    ctx.clearRect(0, 0, width, height);\n\n    for (let i = 0; i < data.length; i++) {\n      const barHeight = (data[i] / 255) * height;\n      ctx.fillStyle = color;\n      ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);\n    }\n  };\n\n  const drawWaves = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    ctx.beginPath();\n    ctx.moveTo(0, height / 2);\n\n    for (let i = 0; i < data.length; i++) {\n      const x = (i / data.length) * width;\n      const y = ((data[i] / 255) * height) / 2 + height / 4;\n      ctx.lineTo(x, y);\n    }\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawCircle = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const radius = Math.min(width, height) / 4;\n\n    ctx.beginPath();\n    for (let i = 0; i < data.length; i++) {\n      const angle = (i / data.length) * Math.PI * 2;\n      const amplitude = (data[i] / 255) * radius;\n      const x = centerX + (radius + amplitude) * Math.cos(angle);\n      const y = centerY + (radius + amplitude) * Math.sin(angle);\n\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawLines = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const lineSpacing = width / (data.length - 1);\n\n    ctx.beginPath();\n    for (let i = 0; i < data.length; i++) {\n      const x = i * lineSpacing;\n      const amplitude = (data[i] / 255) * height;\n      ctx.moveTo(x, height);\n      ctx.lineTo(x, height - amplitude);\n    }\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  const drawEqualizer = (ctx: CanvasRenderingContext2D, data: Uint8Array) => {\n    ctx.clearRect(0, 0, width, height);\n    const barWidth = width / 32;\n    const smoothedData = new Array(32).fill(0);\n\n    // Average the frequency data to get smoother bars\n    for (let i = 0; i < 32; i++) {\n      const dataIndex = Math.floor((i / 32) * data.length);\n      smoothedData[i] = data[dataIndex];\n    }\n\n    for (let i = 0; i < 32; i++) {\n      const barHeight = (smoothedData[i] / 255) * height;\n      const gradient = ctx.createLinearGradient(0, height - barHeight, 0, height);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(1, color + \"44\");\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);\n    }\n  };\n\n  useEffect(() => {\n    if (!analyser || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const data = new Uint8Array(analyser.frequencyBinCount);\n\n    const draw = () => {\n      analyser.getByteFrequencyData(data);\n\n      switch (is) {\n        case \"waves\":\n          drawWaves(ctx, data);\n          break;\n        case \"lines\":\n          drawLines(ctx, data);\n          break;\n        case \"circle\":\n          drawCircle(ctx, data);\n          break;\n        case \"equalizer\":\n          drawEqualizer(ctx, data);\n          break;\n        case \"bars\":\n        default:\n          drawBars(ctx, data);\n          break;\n      }\n\n      animationFrameRef.current = requestAnimationFrame(draw);\n    };\n\n    draw();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [analyser, is, color, width, height]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      data-sonority-component=\"visualizer\"\n      data-sonority-component-is={is?.toString()}\n      className={className}\n    />\n  );\n};\n","import React from \"react\";\nimport { SonorityProvider } from \"../context/SonorityContext\";\nimport { Current } from \"./Current\";\nimport { Control } from \"./Control\";\nimport { Playlist } from \"./Playlist\";\nimport { Track } from \"./Track\";\nimport { Visualizer } from \"./Visualizer\";\n\ninterface SonorityProps {\n  variant?: \"single\" | \"playlist\" | \"multiPlaylist\";\n  className?: string;\n  children: React.ReactNode | any;\n  [key: string]: any;\n}\n\nconst SonorityBase: React.FC<SonorityProps> = ({ variant = \"single\", className, children }) => {\n  return (\n    <div\n      data-sonority-component=\"player\"\n      data-sonority-variant={variant}\n      className={className}>\n      {children}\n    </div>\n  );\n};\n\nconst Sonority: SonorityProps | any = Object.assign(\n  ({ variant, className, children }: SonorityProps | any) => (\n    <SonorityProvider id>\n      <SonorityBase\n        variant={variant}\n        className={className}>\n        {children}\n      </SonorityBase>\n    </SonorityProvider>\n  ),\n  {\n    Current,\n    Control,\n    Playlist,\n    Track,\n    Visualizer,\n  }\n);\n\nexport { Sonority };\nexport default Sonority;\n","import { Sonority } from \"./components/Sonority\";\nimport { Track } from \"./components/Track\";\nimport { Playlist } from \"./components/Playlist\";\nimport { Control } from \"./components/Control\";\nimport { Current } from \"./components/Current\";\nimport { useSonority } from \"./context/SonorityContext\";\n\nexport { Sonority, Track, Playlist, Control, Current, useSonority };\nexport default Sonority;\n"]}