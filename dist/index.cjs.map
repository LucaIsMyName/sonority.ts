{"version":3,"sources":["../src/context/SonorityContext.tsx","../src/utils/audioManager.ts","../src/components/Current.tsx","../src/components/Control.tsx","../src/components/Playlist.tsx","../src/components/Track.tsx","../src/components/Sonority.tsx"],"names":["_a","jsx","jsxs","React","useEffect","Track"],"mappings":"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","sourcesContent":["// src/context/SonorityContext.tsx\nimport React, { createContext, useContext, useReducer, useRef, useEffect } from \"react\";\nimport type { TrackProps, PlaylistProps } from \"../types\";\nimport { audioManager } from \"../utils/audioManager\";\n\ninterface SonorityState {\n  currentTrack: TrackProps | null;\n  currentPlaylist: PlaylistProps | null;\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  volume: number;\n  isShuffled: boolean;\n  isRepeating: boolean;\n  isRepeatingOne: boolean;\n  queue: TrackProps[];\n}\n\ninterface AudioControls {\n  seek: (time: number) => void;\n  setVolume: (volume: number) => void;\n}\n\ninterface SonorityContextType {\n  state: SonorityState;\n  dispatch: React.Dispatch<SonorityAction>;\n  audioControls: AudioControls; // Add this line\n}\n\nconst initialState: SonorityState = {\n  currentTrack: null,\n  currentPlaylist: null,\n  isPlaying: false,\n  currentTime: 0,\n  duration: 0,\n  volume: 1,\n  isShuffled: false,\n  isRepeating: false,\n  isRepeatingOne: false,\n  queue: [],\n};\n\nexport const SonorityContext = createContext<SonorityContextType | null>(null);\n\ntype SonorityAction = { type: \"SET_TRACK\"; payload: TrackProps } | { type: \"SET_PLAYLIST\"; payload: PlaylistProps } | { type: \"PLAY\" } | { type: \"PAUSE\" } | { type: \"SET_VOLUME\"; payload: number } | { type: \"SET_TIME\"; payload: number } | { type: \"TOGGLE_SHUFFLE\" } | { type: \"TOGGLE_REPEAT\" } | { type: \"TOGGLE_REPEAT_ONE\" } | { type: \"NEXT_TRACK\" } | { type: \"PREVIOUS_TRACK\" } | { type: \"SET_QUEUE\"; payload: TrackProps[] };\n\nconst sonorityReducer = (state: SonorityState, action: SonorityAction): SonorityState => {\n  switch (action.type) {\n    case \"SET_TRACK\": {\n      return {\n        ...state,\n        currentTrack: action.payload,\n        currentTime: 0,\n        // Don't change isPlaying state here\n      };\n    }\n    case \"SET_PLAYLIST\":\n      return {\n        ...state,\n        currentPlaylist: action.payload,\n        queue: action.payload.tracks || [], // Update queue when playlist changes\n      };\n    case \"PLAY\":\n      return { ...state, isPlaying: true };\n    case \"PAUSE\":\n      return { ...state, isPlaying: false };\n    case \"SET_VOLUME\":\n      return { ...state, volume: action.payload };\n    case \"SET_TIME\":\n      return { ...state, currentTime: action.payload };\n    case \"SET_DURATION\":\n      return { ...state, duration: action.payload };\n    case \"SET_QUEUE\":\n      return { ...state, queue: action.payload };\n    case \"NEXT_TRACK\": {\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const nextIndex = currentIndex + 1 >= state.queue.length ? 0 : currentIndex + 1;\n      return {\n        ...state,\n        currentTrack: state.queue[nextIndex] || state.currentTrack,\n        currentTime: 0,\n        isPlaying: state.isPlaying, // Maintain play state when changing tracks\n      };\n    }\n    case \"PREVIOUS_TRACK\": {\n      const currentIndex = state.queue.findIndex((track) => track.id === state.currentTrack?.id);\n      const prevIndex = currentIndex <= 0 ? state.queue.length - 1 : currentIndex - 1;\n      return {\n        ...state,\n        currentTrack: state.queue[prevIndex] || state.currentTrack,\n        currentTime: 0,\n        isPlaying: state.isPlaying, // Maintain play state when changing tracks\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const SonorityProvider: React.FC<{ children: React.ReactNode; id: any }> = ({ children, id = crypto.randomUUID() }) => {\n  const [state, dispatch] = useReducer(sonorityReducer, initialState);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const playerIdRef = useRef(id);\n\n  useEffect(() => {\n    // Register this player with the audio manager\n    audioManager.registerPlayer(playerIdRef.current, () => {\n      dispatch({ type: \"PAUSE\" });\n    });\n\n    return () => {\n      audioManager.unregisterPlayer(playerIdRef.current);\n    };\n  }, []);\n  // Create audio element on mount\n  useEffect(() => {\n    audioRef.current = new Audio();\n    audioRef.current.preload = \"auto\";\n    // Enable CORS\n    audioRef.current.crossOrigin = \"anonymous\";\n\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current.src = \"\";\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    if (state.isPlaying) {\n      audioManager.notifyPlayStarted(playerIdRef.current);\n      audioRef.current.play().catch((error) => {\n        console.warn(\"Playback error:\", error);\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle track changes\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    const audio = audioRef.current;\n\n    // Setup new track\n    const setupNewTrack = () => {\n      audio.src = state.currentTrack?.src || \"\";\n      audio.load();\n      // Only auto-play if user has already started playback\n      if (state.isPlaying) {\n        audio.play().catch((error) => {\n          console.log(\"Playback prevented:\", error);\n          dispatch({ type: \"PAUSE\" });\n        });\n      }\n    };\n\n    // Event listeners\n    const handleLoadedMetadata = () => {\n      dispatch({ type: \"SET_DURATION\", payload: audio.duration });\n    };\n\n    const handleTimeUpdate = () => {\n      dispatch({ type: \"SET_TIME\", payload: audio.currentTime });\n    };\n\n    const handleEnded = () => {\n      if (state.isRepeatingOne) {\n        audio.currentTime = 0;\n        audio.play().catch(console.warn);\n      } else if (state.isRepeating || state.queue.length > 0) {\n        dispatch({ type: \"NEXT_TRACK\" });\n      } else {\n        dispatch({ type: \"PAUSE\" });\n      }\n    };\n\n    const handleError = (e: ErrorEvent) => {\n      console.warn(\"Audio error:\", e);\n      // Try to recover by reloading\n      audio.load();\n    };\n\n    // Add listeners\n    audio.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\n    audio.addEventListener(\"ended\", handleEnded);\n    audio.addEventListener(\"error\", handleError);\n\n    // Setup track\n    setupNewTrack();\n\n    return () => {\n      audio.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      audio.removeEventListener(\"ended\", handleEnded);\n      audio.removeEventListener(\"error\", handleError);\n    };\n  }, [state.currentTrack?.id]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (!audioRef.current || !state.currentTrack) return;\n\n    if (state.isPlaying) {\n      audioRef.current.play().catch((error) => {\n        if (error.name === \"NotAllowedError\") {\n          console.log(\"Playback prevented. Waiting for user interaction.\");\n        } else {\n          console.warn(\"Playback error:\", error);\n        }\n        dispatch({ type: \"PAUSE\" });\n      });\n    } else {\n      audioRef.current.pause();\n    }\n  }, [state.isPlaying]);\n\n  // Handle volume\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = state.volume;\n    }\n  }, [state.volume]);\n\n  const audioControls = {\n    seek: (time: number) => {\n      if (audioRef.current) {\n        audioRef.current.currentTime = time;\n      }\n    },\n    setVolume: (volume: number) => {\n      if (audioRef.current) {\n        audioRef.current.volume = volume;\n      }\n    },\n  };\n\n  const value = {\n    state,\n    dispatch,\n    audioControls,\n  };\n\n  return (\n    <SonorityContext.Provider value={value}>\n      {children}\n      {state.currentTrack && (\n        <audio\n          ref={audioRef}\n          src={state.currentTrack.src}\n          preload=\"metadata\"\n        />\n      )}\n    </SonorityContext.Provider>\n  );\n};\n\nexport const useSonority = () => {\n  const context = useContext(SonorityContext);\n  if (!context) {\n    throw new Error(\"useSonority must be used within a SonorityProvider\");\n  }\n  return context;\n};\n","// src/utils/audioManager.ts\ntype PlayerCallback = () => void;\n\nclass AudioManager {\n  private static instance: AudioManager;\n  private currentPlayerId: string | null = null;\n  private callbacks: Map<string, PlayerCallback> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): AudioManager {\n    if (!AudioManager.instance) {\n      AudioManager.instance = new AudioManager();\n    }\n    return AudioManager.instance;\n  }\n\n  registerPlayer(playerId: string, pauseCallback: PlayerCallback) {\n    this.callbacks.set(playerId, pauseCallback);\n  }\n\n  unregisterPlayer(playerId: string) {\n    this.callbacks.delete(playerId);\n  }\n\n  notifyPlayStarted(playerId: string) {\n    if (this.currentPlayerId && this.currentPlayerId !== playerId) {\n      // Pause the previously playing player\n      const pauseCallback = this.callbacks.get(this.currentPlayerId);\n      if (pauseCallback) {\n        pauseCallback();\n      }\n    }\n    this.currentPlayerId = playerId;\n  }\n}\n\nexport const audioManager = AudioManager.getInstance();","// src/components/Current.tsx\nimport React from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport type { TrackProps } from \"../types\";\n\nexport interface CurrentProps {\n  className?: string;\n  children?: React.ReactNode;\n  is?: \"cover\" | \"track\" | \"playlist\" | \"artist\" | \"album\" | \"copyright\" | \"writtenBy\";\n}\n\n// Helper components\nconst CoverComponent: React.FC<{ className?: string }> = ({ className }) => {\n  const { state } = useSonority();\n  return state.currentTrack?.image ? (\n    <img\n      src={state.currentTrack.image.src}\n      alt={state.currentTrack.image.alt}\n      className={className}\n    />\n  ) : null;\n};\n\nconst TrackComponent: React.FC<{ className?: string; children?: React.ReactNode }> = ({ className, children }) => {\n  const { state } = useSonority();\n  return <div className={className}>{children || state.currentTrack?.title}</div>;\n};\n\nconst ArtistComponent: React.FC<{ className?: string; children?: React.ReactNode }> = ({ className, children }) => {\n  const { state } = useSonority();\n  return <div className={className}>{children || state.currentTrack?.artist}</div>;\n};\n\nexport const Current = Object.assign(\n  ({ is = \"track\", className, children }: CurrentProps) => {\n    const { state } = useSonority();\n\n    switch (is) {\n      case \"cover\":\n        return <CoverComponent className={className} />;\n      case \"track\":\n        return <TrackComponent className={className}>{children}</TrackComponent>;\n      case \"artist\":\n        return <ArtistComponent className={className}>{children}</ArtistComponent>;\n      case \"album\":\n        return <div className={className}>{children || state.currentTrack?.album}</div>;\n      case \"writtenBy\":\n        return <div className={className}>{children || state.currentTrack?.writtenBy}</div>;\n      case \"copyright\":\n        return <div className={className}>{children || state.currentTrack?.copyright}</div>;\n      default:\n        return <div className={className}>{children}</div>;\n    }\n  },\n  {\n    Cover: CoverComponent,\n    Track: TrackComponent,\n    Artist: ArtistComponent,\n  }\n) as React.FC<CurrentProps> & {\n  Cover: typeof CoverComponent;\n  Track: typeof TrackComponent;\n  Artist: typeof ArtistComponent;\n};\n\nexport default Current;\n","// src/components/Control.tsx\nimport React from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport * as Slider from \"@radix-ui/react-slider\";\nimport * as Progress from \"@radix-ui/react-progress\";\n\nexport interface ControlProps {\n  is: \"play\" | \"pause\" | \"stop\" | \"next\" | \"previous\" | \"shuffle\" | \"repeat\" | \"volume\" | \"seek\";\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// src/components/Control.tsx\nexport const Control: React.FC<ControlProps> = ({ className, children, is }) => {\n  const { state, dispatch, audioControls } = useSonority();\n\n  const handlePlayPause = () => {\n    if (!state.currentTrack && state.queue.length > 0) {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: state.queue[0],\n      });\n    }\n    dispatch({ type: state.isPlaying ? \"PAUSE\" : \"PLAY\" });\n  };\n\n  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const time = parseFloat(e.target.value);\n    if (audioControls?.seek) {\n      audioControls.seek(time);\n      dispatch({ type: \"SET_TIME\", payload: time });\n    }\n  };\n\n  const handleVolume = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const volume = parseFloat(e.target.value);\n    dispatch({ type: \"SET_VOLUME\", payload: volume });\n  };\n\n  const getControlContent = () => {\n    switch (is) {\n      case \"play\":\n      case \"pause\":\n        return (\n          <button\n            onClick={handlePlayPause}\n            className={className}>\n            {children}\n          </button>\n        );\n\n      case \"next\":\n        return (\n          <button\n            onClick={() => dispatch({ type: \"NEXT_TRACK\" })}\n            className={className}\n            disabled={state.queue.length <= 1}>\n            {children}\n          </button>\n        );\n\n      case \"previous\":\n        return (\n          <button\n            onClick={() => dispatch({ type: \"PREVIOUS_TRACK\" })}\n            className={className}\n            disabled={state.queue.length <= 1}>\n            {children}\n          </button>\n        );\n\n      case \"seek\":\n        return (\n          <Slider.Root\n            style={{\n              width: \"100%\",\n              height: \"3px\",\n              position: \"relative\",\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              touchAction: \"none\",\n              userSelect: \"none\",\n              ...(typeof className === \"string\" ? parseStyleString(className) : {}),\n            }}\n            value={[state.currentTime]}\n            onValueChange={(value) => {\n              if (audioControls?.seek && value.length > 0) {\n                audioControls.seek(value[0]);\n                dispatch({ type: \"SET_TIME\", payload: value[0] });\n              }\n            }}\n            max={state.duration || 0}\n            step={0.1}>\n            <Slider.Track\n              style={{\n                position: \"relative\",\n                flexGrow: 1,\n                height: \"3px\",\n                backgroundColor: \"#d1d5db\", // gray-300\n                borderRadius: \"9999px\",\n              }}>\n              <Slider.Range\n                style={{\n                  position: \"absolute\",\n                  height: \"100%\",\n                  backgroundColor: \"#2563eb\", // blue-500\n                  borderRadius: \"9999px\",\n                  left: 0,\n                  right: 0,\n                }}\n              />\n            </Slider.Track>\n            <Slider.Thumb\n              style={{\n                width: \"12px\",\n                height: \"12px\",\n                backgroundColor: \"#2563eb\", // blue-500\n                borderRadius: \"50%\",\n                border: \"none\",\n                outline: \"none\",\n                boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n                transition: \"background-color 0.2s\",\n              }}\n              aria-label=\"Seek\"\n            />\n          </Slider.Root>\n        );\n\n      case \"volume\":\n        return (\n          <Slider.Root\n            style={{\n              width: \"100%\",\n              height: \"3px\",\n              position: \"relative\",\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              touchAction: \"none\",\n              userSelect: \"none\",\n              ...(typeof className === \"string\" ? parseStyleString(className) : {}),\n            }}\n            value={[state.volume]}\n            max={1}\n            step={0.01}\n            onValueChange={(value) => {\n              if (value.length > 0) {\n                dispatch({ type: \"SET_VOLUME\", payload: value[0] });\n                audioControls.setVolume(value[0]);\n              }\n            }}>\n            <Slider.Track\n              style={{\n                position: \"relative\",\n                flexGrow: 1,\n                height: \"3px\",\n                backgroundColor: \"#e5e7eb\", // gray-200\n                borderRadius: \"9999px\",\n              }}>\n              <Slider.Range\n                style={{\n                  position: \"absolute\",\n                  height: \"100%\",\n                  backgroundColor: \"#2563eb\", // blue-500\n                  borderRadius: \"9999px\",\n                  left: 0,\n                  right: 0,\n                }}\n              />\n            </Slider.Track>\n            <Slider.Thumb\n              style={{\n                width: \"10px\",\n                height: \"10px\",\n                backgroundColor: \"#2563eb\", // blue-500\n                borderRadius: \"50%\",\n                border: \"none\",\n                outline: \"none\",\n                boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n                transition: \"background-color 0.2s\",\n              }}\n              aria-label=\"Volume\"\n            />\n          </Slider.Root>\n        );\n\n      case \"repeat\":\n        return (\n          <button\n            onClick={() => dispatch({ type: \"TOGGLE_REPEAT\" })}\n            className={className}>\n            {children}\n          </button>\n        );\n\n      default:\n        return children;\n    }\n  };\n\n  return (\n    <div\n      data-sonority-component=\"control\"\n      data-sonority-component-is={is}>\n      {getControlContent()}\n    </div>\n  );\n};\n\nfunction parseStyleString(className: string): React.CSSProperties {\n  const styles: React.CSSProperties = {};\n  \n  // Simple width mapping\n  const widthMap: {[key: string]: string} = {\n    'w-full': '100%',\n    'w-1/2': '50%',\n    'w-1/4': '25%',\n    // Add more as needed\n  };\n\n  // Simple height mapping\n  const heightMap: {[key: string]: string} = {\n    'h-full': '100%',\n    'h-1': '0.25rem',\n    'h-2': '0.5rem',\n    'h-3': '0.75rem',\n    // Add more as needed\n  };\n\n  // Parse width\n  const widthClass = className.match(/w-[^\\s]+/)?.[0];\n  if (widthClass) styles.width = widthMap[widthClass] || widthClass.replace('w-', '');\n\n  // Parse height\n  const heightClass = className.match(/h-[^\\s]+/)?.[0];\n  if (heightClass) styles.height = heightMap[heightClass] || heightClass.replace('h-', '');\n\n  return styles;\n}","import React, { useEffect } from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\nimport { Track, TrackComponentProps as TrackProps } from \"./Track\";\n\nexport interface PlaylistProps {\n  name: string;\n  id: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\n// src/components/Playlist.tsx\nexport const Playlist: React.FC<PlaylistProps> = ({\n  name,\n  id,\n  children,\n  className,\n}) => {\n  const { dispatch, state } = useSonority();\n\n  // Single initialization effect\n  useEffect(() => {\n    const trackElements = React.Children.toArray(children).filter(\n      (child) => React.isValidElement(child) && child.type === Track\n    );\n\n    const extractedTracks = trackElements.map((track: any) => ({\n      ...track.props,\n      id: track.props.id || crypto.randomUUID(),\n    }));\n\n    // Initialize playlist\n    dispatch({\n      type: \"SET_PLAYLIST\",\n      payload: {\n        id,\n        name,\n        tracks: extractedTracks,\n      },\n    });\n\n    // Select first track by default if no track is currently selected\n    if (!state.currentTrack && extractedTracks.length > 0) {\n      dispatch({\n        type: \"SET_TRACK\",\n        payload: extractedTracks[0],\n      });\n    }\n  }, [id, name]); \n\n  const handleTrackSelect = (trackProps: TrackProps) => {\n    dispatch({\n      type: \"SET_TRACK\",\n      payload: trackProps,\n    });\n  };\n\n  return (\n    <div\n      data-sonority-component=\"playlist\"\n      data-sonority-playlist-id={id}\n      data-sonority-playlist-name={name}\n      className={className}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Track) {\n          return React.cloneElement(child, {\n            ...child.props,\n            onClick: () => handleTrackSelect(child.props),\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};","import React from \"react\";\nimport { useSonority } from \"../context/SonorityContext\";\n\nexport interface TrackProps {\n  className?: string;\n  title: string;\n  artist?: string;\n  image?: { src: string; alt?: string };\n  src: string;\n  id: string;\n  onClick?: () => void;\n}\n\nexport interface TrackComponentProps extends TrackProps {\n  className?: string;\n  children?: React.ReactNode; // Add this line\n  onClick?: () => void;\n}\n\n// src/components/Track.tsx\nexport const Track: React.FC<TrackComponentProps> = ({ className, title, artist, image, src, id, onClick, children, ...props }) => {\n  const { dispatch, state } = useSonority(); // Make sure to use useSonority hook\n  const handleTrackClick = () => {\n    dispatch({\n      type: \"SET_TRACK\",\n      payload: {\n        id,\n        title,\n        artist,\n        image,\n        src,\n        ...props,\n      },\n    });\n    // Let the user explicitly start playback with the play button\n    onClick?.();\n  };\n  const isCurrentTrack = state.currentTrack?.id === id;\n\n  return (\n    <button\n      data-sonority-component=\"track\"\n      data-sonority-current={isCurrentTrack}\n      className={className}\n      onClick={onClick} // Use the onClick from props\n    >\n      {children || (\n        <>\n          {image && (\n            <img\n              src={image.src}\n              alt={image.alt || title}\n              className=\"w-full h-auto\"\n            />\n          )}\n          <div>\n            <h3>{title}</h3>\n            {artist && <p>{artist}</p>}\n          </div>\n        </>\n      )}\n    </button>\n  );\n};\n","// src/components/Sonority.tsx\nimport React from \"react\";\nimport { SonorityProvider } from \"../context/SonorityContext\";\nimport { Current } from \"./Current\";\nimport { Control } from \"./Control\";\nimport { Playlist } from \"./Playlist\";\nimport { Track } from \"./Track\";\n\ninterface SonorityProps {\n  variant?: \"single\" | \"playlist\" | \"multiPlaylist\";\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst SonorityBase: React.FC<SonorityProps> = ({ variant = \"single\", className, children }) => {\n  return (\n    <div\n      data-sonority-component=\"player\"\n      data-sonority-variant={variant}\n      className={className}>\n      {children}\n    </div>\n  );\n};\n\n// Create the compound component with the provider built-in\nconst Sonority = Object.assign(\n  ({ variant, className, children }: SonorityProps) => (\n    <SonorityProvider id>\n      <SonorityBase\n        variant={variant}\n        className={className}>\n        {children}\n      </SonorityBase>\n    </SonorityProvider>\n  ),\n  {\n    Current,\n    Control,\n    Playlist,\n    Track,\n  }\n);\n\nexport { Sonority };\n"]}